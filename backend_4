model.py

from django.db import models
from django.contrib.auth.models import AbstractUser


class CustomUser(AbstractUser):
    ROLE_CHOICES = (
        ('admin', 'Admin'),
        ('hotel_owner', 'Hotel Owner'),
        ('user', 'User'),
    )
    role = models.CharField(max_length=20, choices=ROLE_CHOICES)

    def is_admin(self):
        return self.role == 'admin'

    def is_hotel_owner(self):
        return self.role == 'hotel_owner'

    def is_user(self):
        return self.role == 'user'
    
    pass


class State(models.Model):
    name = models.CharField(max_length=100, unique=True)

    def __str__(self):
        return self.name


class Place(models.Model):
    name = models.CharField(max_length=100)
    state = models.ForeignKey(State, on_delete=models.CASCADE, related_name='places')

    class Meta:
        unique_together = ('name', 'state')

    def __str__(self):
        return f"{self.name}, {self.state.name}"


class Hotel(models.Model):
    owner = models.ForeignKey(CustomUser, on_delete=models.CASCADE, limit_choices_to={'role': 'hotel_owner'}, related_name='hotels')
    place = models.ForeignKey(Place, on_delete=models.CASCADE, related_name='hotels')
    name = models.CharField(max_length=200)
    description = models.TextField(blank=True)
    facilities = models.TextField(blank=True)  # Can be JSON/Text, simple CSV string or m2m with another model for facilities
    photos = models.ManyToManyField('Photo', blank=True)
    available_rooms = models.PositiveIntegerField(default=0)
    # Optionally store room details as JSON/text or have separate Room model (simplified here)
    room_details = models.TextField(blank=True)  # e.g. JSON string about room types

    def __str__(self):
        return f"{self.name} ({self.place.name}, {self.place.state.name})"


class Photo(models.Model):
    image = models.ImageField(upload_to='hotel_photos/')
    uploaded_at = models.DateTimeField(auto_now_add=True)


class Booking(models.Model):
    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE, limit_choices_to={'role': 'user'}, related_name='bookings')
    hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, related_name='bookings')
    booked_from = models.DateField()
    booked_to = models.DateField()
    rooms_booked = models.PositiveIntegerField(default=1)
    total_amount = models.DecimalField(max_digits=10, decimal_places=2)
    booked_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Booking by {self.user.username} at {self.hotel.name}"


class Review(models.Model):
    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE, limit_choices_to={'role': 'user'}, related_name='reviews')
    hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, related_name='reviews')
    rating = models.PositiveSmallIntegerField(default=5)  # 1-5 scale
    comment = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Review by {self.user.username} on {self.hotel.name}"


class Reply(models.Model):
    review = models.ForeignKey(Review, on_delete=models.CASCADE, related_name='replies')
    sender = models.ForeignKey(CustomUser, on_delete=models.CASCADE, limit_choices_to=models.Q(role='admin') | models.Q(role='hotel_owner'))
    message = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Reply by {self.sender.username} to Review {self.review.id}"






permissiona.py

from rest_framework.permissions import BasePermission


class IsAdmin(BasePermission):
    def has_permission(self, request, view):
        return bool(request.user and request.user.is_authenticated and request.user.is_admin())


class IsHotelOwner(BasePermission):
    def has_permission(self, request, view):
        return bool(request.user and request.user.is_authenticated and request.user.is_hotel_owner())


class IsUser(BasePermission):
    def has_permission(self, request, view):
        return bool(request.user and request.user.is_authenticated and request.user.is_user())



serializers.py


from rest_framework import serializers
from .models import (
    State, Place, Hotel, Photo, Booking, Review, Reply, CustomUser
)
from django.contrib.auth.password_validation import validate_password
from rest_framework.validators import UniqueValidator


class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = CustomUser
        fields = ['id', 'username', 'role']


class RegisterHotelOwnerSerializer(serializers.ModelSerializer):
    username = serializers.CharField(
        required=True,
        validators=[UniqueValidator(queryset=CustomUser.objects.all())]
    )
    password = serializers.CharField(write_only=True, required=True, validators=[validate_password])

    class Meta:
        model = CustomUser
        fields = ('id', 'username', 'password')

    def create(self, validated_data):
        user = CustomUser.objects.create_user(
            username=validated_data['username'],
            password=validated_data['password'],
            role='hotel_owner'
        )
        return user


class StateSerializer(serializers.ModelSerializer):
    class Meta:
        model = State
        fields = ['id', 'name']


class PlaceSerializer(serializers.ModelSerializer):
    state = StateSerializer(read_only=True)
    state_id = serializers.PrimaryKeyRelatedField(queryset=State.objects.all(), write_only=True, source='state')

    class Meta:
        model = Place
        fields = ['id', 'name', 'state', 'state_id']


class PhotoSerializer(serializers.ModelSerializer):
    class Meta:
        model = Photo
        fields = ['id', 'image', 'uploaded_at']


class HotelSerializer(serializers.ModelSerializer):
    owner = UserSerializer(read_only=True)
    place = PlaceSerializer(read_only=True)
    place_id = serializers.PrimaryKeyRelatedField(queryset=Place.objects.all(), write_only=True, source='place')
    photos = PhotoSerializer(many=True, read_only=True)

    class Meta:
        model = Hotel
        fields = [
            'id', 'name', 'description', 'available_rooms',
            'room_details', 'facilities', 'photos',
            'owner', 'place', 'place_id'
        ]


class HotelCreateUpdateSerializer(serializers.ModelSerializer):
    photos = serializers.ListField(
        child=serializers.ImageField(), write_only=True, required=False
    )
    place_id = serializers.PrimaryKeyRelatedField(queryset=Place.objects.all(), source='place')

    class Meta:
        model = Hotel
        fields = [
            'name', 'description', 'available_rooms', 'room_details', 'facilities', 'photos', 'place_id'
        ]

    def create(self, validated_data):
        photos_data = validated_data.pop('photos', [])
        hotel = Hotel.objects.create(owner=self.context['request'].user, **validated_data)
        for photo in photos_data:
            photo_obj = Photo.objects.create(image=photo)
            hotel.photos.add(photo_obj)
        return hotel

    def update(self, instance, validated_data):
        photos_data = validated_data.pop('photos', None)
        for attr, value in validated_data.items():
            setattr(instance, attr, value)
        instance.save()

        if photos_data is not None:
            # Optionally clear existing photos and add new
            instance.photos.clear()
            for photo in photos_data:
                photo_obj = Photo.objects.create(image=photo)
                instance.photos.add(photo_obj)
        return instance


class BookingSerializer(serializers.ModelSerializer):
    user = UserSerializer(read_only=True)
    hotel = HotelSerializer(read_only=True)
    hotel_id = serializers.PrimaryKeyRelatedField(queryset=Hotel.objects.all(), write_only=True, source='hotel')

    class Meta:
        model = Booking
        fields = [
            'id', 'user', 'hotel', 'hotel_id',
            'booked_from', 'booked_to', 'rooms_booked',
            'total_amount', 'booked_at'
        ]

    def create(self, validated_data):
        user = self.context['request'].user
        validated_data['user'] = user
        booking = Booking.objects.create(**validated_data)
        return booking


class ReviewSerializer(serializers.ModelSerializer):
    user = UserSerializer(read_only=True)
    hotel = HotelSerializer(read_only=True)
    hotel_id = serializers.PrimaryKeyRelatedField(queryset=Hotel.objects.all(), write_only=True, source='hotel')

    class Meta:
        model = Review
        fields = ['id', 'user', 'hotel', 'hotel_id', 'rating', 'comment', 'created_at']

    def create(self, validated_data):
        user = self.context['request'].user
        validated_data['user'] = user
        review = Review.objects.create(**validated_data)
        return review


class ReplySerializer(serializers.ModelSerializer):
    sender = UserSerializer(read_only=True)
    review_id = serializers.PrimaryKeyRelatedField(queryset=Review.objects.all(), write_only=True, source='review')

    class Meta:
        model = Reply
        fields = ['id', 'review_id', 'sender', 'message', 'created_at']

    def create(self, validated_data):
        sender = self.context['request'].user
        validated_data['sender'] = sender
        reply = Reply.objects.create(**validated_data)
        return reply



urls.py





from django.urls import path, include
from rest_framework.routers import DefaultRouter

from .views import (
    login_view,
    HotelOwnerCreateAPIView,
    StateListAPIView,
    PlaceListByStateAPIView,
    HotelViewSet,
    HotelBrowseListAPIView,
    HotelDetailAPIView,
    BookingCreateListAPIView,
    BookingListForAdminView,
    BookingListForHotelOwnerView,
    ReviewCreateListAPIView,
    ReviewListForHotelOwnerView,
    ReviewListForAdminView,
    ReplyCreateListAPIView,
    RepliesByUserReviewsAPIView,
)

router = DefaultRouter()
router.register(r'hotels', HotelViewSet, basename='hotel')  # CRUD for hotel owners

urlpatterns = [
    # Authentication / user management
    path('login/', login_view, name='login'),

    # Admin endpoints
    path('admin/hotel_owner/create/', HotelOwnerCreateAPIView.as_view(), name='create-hotel-owner'),
    path('admin/bookings/', BookingListForAdminView.as_view(), name='admin-bookings'),
    path('admin/reviews/', ReviewListForAdminView.as_view(), name='admin-reviews'),

    # Hotel Owner bookings and reviews
    path('hotel_owner/bookings/', BookingListForHotelOwnerView.as_view(), name='hotel-owner-bookings'),
    path('hotel_owner/reviews/', ReviewListForHotelOwnerView.as_view(), name='hotel-owner-reviews'),

    # Replies for Admin and Hotel Owner
    path('replies/', ReplyCreateListAPIView.as_view(), name='review-replies'),

    # User endpoints
    path('user/bookings/', BookingCreateListAPIView.as_view(), name='user-bookings'),
    path('user/reviews/', ReviewCreateListAPIView.as_view(), name='user-reviews'),
    path('user/replies/', RepliesByUserReviewsAPIView.as_view(), name='user-replies'),

    # Hierarchical Location
    path('states/', StateListAPIView.as_view(), name='states-list'),
    path('states/<int:state_id>/places/', PlaceListByStateAPIView.as_view(), name='places-by-state'),

    # Hotel browsing for all users
    path('browse/hotels/', HotelBrowseListAPIView.as_view(), name='browse-hotels'),
    path('browse/hotels/<int:pk>/', HotelDetailAPIView.as_view(), name='hotel-detail'),

    path('', include(router.urls)),
]





views.py




from rest_framework import generics, viewsets, status
from rest_framework.decorators import action, api_view, permission_classes
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated, AllowAny
from django.contrib.auth import authenticate, login
from django.db.models import Q

from .models import (
    State, Place, Hotel, Booking, Review, Reply, CustomUser
)
from .serializers import (
    StateSerializer, PlaceSerializer, HotelSerializer, HotelCreateUpdateSerializer,
    BookingSerializer, ReviewSerializer, ReplySerializer,
    RegisterHotelOwnerSerializer
)
from .permissions import IsAdmin, IsHotelOwner, IsUser


# 1. Login API (shared login page)
@api_view(['POST'])
@permission_classes([AllowAny])
def login_view(request):
    username = request.data.get('username')
    password = request.data.get('password')
    user = authenticate(request, username=username, password=password)
    if user is not None:
        login(request, user)
        return Response({
            'message': f'Logged in as {user.username}',
            'user_id': user.id,
            'role': user.role
        })
    return Response({'error': 'Invalid credentials'}, status=status.HTTP_400_BAD_REQUEST)


# 2. Admin-only: Create hotel owner accounts
class HotelOwnerCreateAPIView(generics.CreateAPIView):
    serializer_class = RegisterHotelOwnerSerializer
    permission_classes = [IsAuthenticated, IsAdmin]


# 3. State and Place - Read-only for all authenticated users
class StateListAPIView(generics.ListAPIView):
    queryset = State.objects.all()
    serializer_class = StateSerializer
    permission_classes = [IsAuthenticated]


class PlaceListByStateAPIView(generics.ListAPIView):
    serializer_class = PlaceSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        state_id = self.kwargs.get('state_id')
        return Place.objects.filter(state_id=state_id)


# 4. Hotel Owner: Create/Update/Delete their hotels
class HotelViewSet(viewsets.ModelViewSet):
    permission_classes = [IsAuthenticated, IsHotelOwner]
    serializer_class = HotelSerializer

    def get_queryset(self):
        # Hotel Owners only see their hotels
        return Hotel.objects.filter(owner=self.request.user)

    def get_serializer_class(self):
        if self.action in ['create', 'update', 'partial_update']:
            return HotelCreateUpdateSerializer
        return HotelSerializer

    def perform_create(self, serializer):
        serializer.save(owner=self.request.user)


# 5. User: browse hotels by State and Place - list and detail views open to any authenticated user
class HotelBrowseListAPIView(generics.ListAPIView):
    serializer_class = HotelSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        queryset = Hotel.objects.all()
        state_id = self.request.query_params.get('state_id')
        place_id = self.request.query_params.get('place_id')
        if state_id:
            queryset = queryset.filter(place__state_id=state_id)
        if place_id:
            queryset = queryset.filter(place_id=place_id)
        return queryset


class HotelDetailAPIView(generics.RetrieveAPIView):
    serializer_class = HotelSerializer
    queryset = Hotel.objects.all()
    permission_classes = [IsAuthenticated]


# 6. Booking endpoints (Users only)
class BookingCreateListAPIView(generics.ListCreateAPIView):
    serializer_class = BookingSerializer
    permission_classes = [IsAuthenticated, IsUser]

    def get_queryset(self):
        # Users see their own bookings
        return Booking.objects.filter(user=self.request.user)

    # On create, booking info is saved and accessible to hotel owner and admin via bookings listing below


# 7. Booking detail for Admin and Hotel Owner
class BookingListForAdminView(generics.ListAPIView):
    serializer_class = BookingSerializer
    permission_classes = [IsAuthenticated, IsAdmin]

    def get_queryset(self):
        return Booking.objects.all()  # All bookings


class BookingListForHotelOwnerView(generics.ListAPIView):
    serializer_class = BookingSerializer
    permission_classes = [IsAuthenticated, IsHotelOwner]

    def get_queryset(self):
        # Bookings for hotels owned by current hotel owner
        return Booking.objects.filter(hotel__owner=self.request.user)


# 8. Review endpoints
class ReviewCreateListAPIView(generics.ListCreateAPIView):
    serializer_class = ReviewSerializer
    permission_classes = [IsAuthenticated, IsUser]

    def get_queryset(self):
        return Review.objects.filter(user=self.request.user)

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)


# 9. Review list for Hotel Owner and Admin (to see reviews on their/all hotels)
class ReviewListForHotelOwnerView(generics.ListAPIView):
    serializer_class = ReviewSerializer
    permission_classes = [IsAuthenticated, IsHotelOwner]

    def get_queryset(self):
        return Review.objects.filter(hotel__owner=self.request.user)


class ReviewListForAdminView(generics.ListAPIView):
    serializer_class = ReviewSerializer
    permission_classes = [IsAuthenticated, IsAdmin]

    def get_queryset(self):
        return Review.objects.all()


# 10. Reply to reviews - Hotel Owner and Admin only
class ReplyCreateListAPIView(generics.ListCreateAPIView):
    serializer_class = ReplySerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        user = self.request.user
        if user.is_admin():
            return Reply.objects.all()
        elif user.is_hotel_owner():
            # Replies where review belongs to hotels owned by this hotel owner
            return Reply.objects.filter(review__hotel__owner=user)
        else:
            return Reply.objects.none()

    def perform_create(self, serializer):
        user = self.request.user
        if not (user.is_admin() or user.is_hotel_owner()):
            from rest_framework.exceptions import PermissionDenied
            raise PermissionDenied("Only admin or hotel owners can reply.")
        serializer.save(sender=user)


# 11. User view to see replies on their reviews
class RepliesByUserReviewsAPIView(generics.ListAPIView):
    serializer_class = ReplySerializer
    permission_classes = [IsAuthenticated, IsUser]

    def get_queryset(self):
        user = self.request.user
        return Reply.objects.filter(review__user=user)








