import React, { useState, useEffect } from 'react';
import './SearchResults.css';
import { FaBed, FaHome, FaUsers, FaMoneyCheckAlt, FaBullhorn, FaChartBar, FaBell } from 'react-icons/fa';
import { Chart } from 'chart.js/auto';
import Calendar from 'react-calendar';

const SIDEBAR_MENU = [
  { name: "Dashboard", icon: <FaChartBar /> },
  { name: "Bookings", icon: <FaBed /> },
  { name: "Property", icon: <FaHome /> },
  { name: "Users", icon: <FaUsers /> },
  { name: "Payments", icon: <FaMoneyCheckAlt /> },
  { name: "Marketing", icon: <FaBullhorn /> },
];

const DUMMY_NOTIFICATIONS = [
  { id: 1, text: "New booking: John Doe (Deluxe Room)" },
  { id: 2, text: "Check-in: Jane Smith" },
  { id: 3, text: "Payment received: $225 from Mike B." },
];

export default function AdminDashboard() {
  const [activeSection, setActiveSection] = useState('Dashboard');
  // Dashboard
  const [dashboardMetrics, setDashboardMetrics] = useState({
    revenue: 15000,
    totalBookings: 250,
    occupancy: 85,
    checkins: 15,
    monthlyRevenue: [2000, 2500, 2200, 2800, 3200, 2300],
    monthlyLabels: ['Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug'],
    recentActivity: [
      { id: 1, type: 'Booking', content: 'John Doe booked Deluxe Room.' },
      { id: 2, type: 'Check-in', content: 'Sarah Lee checked in.' },
      { id: 3, type: 'Cancellation', content: 'Mike Brown cancelled Standard Room.' },
    ]
  });
  // Bookings
  const [bookings, setBookings] = useState([]);
  const [bookingLoading, setBookingLoading] = useState(true);
  const [bookingSearch, setBookingSearch] = useState('');
  const [bookingFilters, setBookingFilters] = useState({
    status: '', roomType: '', date: ''
  });
  const [showBookingModal, setShowBookingModal] = useState(false);
  const [bookingForm, setBookingForm] = useState({
    guest: '', room: '', checkIn: '', checkOut: '', status: 'Confirmed'
  });
  // Property/Rooms
  const [rooms, setRooms] = useState([]);
  const [propertyLoading, setPropertyLoading] = useState(true);
  const [showRoomModal, setShowRoomModal] = useState(false);
  const [roomForm, setRoomForm] = useState({
    name: '', description: '', photo: '', amenities: '', capacity: '', price: '', status: 'Available'
  });
  const [calendarDate, setCalendarDate] = useState(new Date());
  // Users
  const [users, setUsers] = useState([]);
  const [userLoading, setUserLoading] = useState(true);
  const [showUserModal, setShowUserModal] = useState(false);
  const [showUserHistory, setShowUserHistory] = useState(false);
  const [selectedUser, setSelectedUser] = useState(null);
  const [userForm, setUserForm] = useState({
    name: '', email: '', password: '', role: 'Customer'
  });
  // Payments
  const [payments, setPayments] = useState([]);
  const [paymentsLoading, setPaymentsLoading] = useState(true);
  const [reportParams, setReportParams] = useState({
    start: '', end: '', status: '', type: ''
  });
  // Marketing/Promotions
  const [promotions, setPromotions] = useState([]);
  const [promoForm, setPromoForm] = useState({
    name: '', code: '', discountType: '', value: '', start: '', end: ''
  });
  // Notifications
  const [showNotifications, setShowNotifications] = useState(false);
  const [notifications, setNotifications] = useState(DUMMY_NOTIFICATIONS);

  // Dashboard Chart
  useEffect(() => {
    if (activeSection === 'Dashboard') {
      const canvasId = 'monthlyRevenueChart';
      const canvas = document.getElementById(canvasId);
      if (!canvas) return;
      // Destroy previous chart
      if (Chart.getChart(canvasId)) Chart.getChart(canvasId).destroy();
      const ctx = canvas.getContext('2d');
      new Chart(ctx, {
        type: 'line',
        data: {
          labels: dashboardMetrics.monthlyLabels,
          datasets: [{
            label: 'Monthly Revenue',
            backgroundColor: '#6366f1',
            borderColor: '#6366f1',
            data: dashboardMetrics.monthlyRevenue,
            fill: false,
            tension: 0.4,
            pointRadius: 5,
            pointHoverRadius: 7
          }]
        },
        options: {
          plugins: {
            legend: { display: false }
          },
          scales: {
            y: { beginAtZero: true }
          }
        }
      });
    }
    // eslint-disable-next-line
  }, [activeSection, dashboardMetrics.monthlyRevenue]);

  // API FETCH EXAMPLES
  useEffect(() => {
    // Bookings
    setBookingLoading(true);
    fetch('/api/bookings')
      .then(res => res.json())
      .then(data => setBookings(data))
      .catch(() => {})
      .finally(() => setBookingLoading(false));
    // Property/Rooms
    setPropertyLoading(true);
    fetch('/api/rooms')
      .then(res => res.json())
      .then(data => setRooms(data))
      .catch(() => {})
      .finally(() => setPropertyLoading(false));
    // Users
    setUserLoading(true);
    fetch('/api/users')
      .then(res => res.json())
      .then(data => setUsers(data))
      .catch(() => {})
      .finally(() => setUserLoading(false));
    // Payments
    setPaymentsLoading(true);
    fetch('/api/payments')
      .then(res => res.json())
      .then(data => setPayments(data))
      .catch(() => {})
      .finally(() => setPaymentsLoading(false));
    // Promotions
    fetch('/api/promotions')
      .then(res => res.json())
      .then(data => setPromotions(data))
      .catch(() => {});
  }, []);

  // --- HANDLERS ---

  // Demo: Replace these with POST/DELETE API calls as needed
  const handleCreateBooking = e => {
    e.preventDefault();
    // API POST example
    fetch('/api/bookings', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(bookingForm)
    })
      .then(res => res.json())
      .then(newBooking => setBookings(prev => [newBooking, ...prev]));
    setShowBookingModal(false);
  };

  const handleEditBooking = id => {};
  const handleCancelBooking = id => {};
  const handleCheckinCheckout = (id, status) => {};

  const handleFilterBookings = () => {};
  const filteredBookings = bookings.filter(b =>
    (bookingSearch === '' || b.guest.toLowerCase().includes(bookingSearch.toLowerCase())) &&
    (bookingFilters.status === '' || b.status === bookingFilters.status) &&
    (bookingFilters.roomType === '' || b.roomType === bookingFilters.roomType)
  );
  // Room Handlers
  const handleCreateRoom = e => {
    e.preventDefault();
    fetch('/api/rooms', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(roomForm)
    })
      .then(res => res.json())
      .then(newRoom => setRooms(prev => [newRoom, ...prev]));
    setShowRoomModal(false);
  };
  // User Handlers
  const handleCreateUser = e => {
    e.preventDefault();
    fetch('/api/users', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(userForm)
    })
      .then(res => res.json())
      .then(newUser => setUsers(prev => [newUser, ...prev]));
    setShowUserModal(false);
  };
  // Promo Handlers
  const handleCreatePromotion = e => {
    e.preventDefault();
    fetch('/api/promotions', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(promoForm)
    })
      .then(res => res.json())
      .then(newPromo => setPromotions(prev => [newPromo, ...prev]));
  };

  // ---- RENDERS ----

  const renderSidebar = () => (
    <aside className="sidebar">
      <div className="sidebar-header">
        <FaHome className="sidebar-logo" />
        <span>Hotel Admin</span>
      </div>
      <nav>
        {SIDEBAR_MENU.map(item => (
          <button
            key={item.name}
            className={`sidebar-link ${activeSection === item.name ? 'active' : ''}`}
            onClick={() => setActiveSection(item.name)}
            aria-label={item.name}
          >
            {item.icon}
            <span>{item.name}</span>
          </button>
        ))}
      </nav>
    </aside>
  );

  const renderHeader = () => (
    <header className="main-header">
      <h1>{activeSection}</h1>
      <div className="header-actions">
        <button className="notification-bell" aria-label="Show notifications"
          onClick={() => setShowNotifications(!showNotifications)}
        >
          <FaBell />
          {notifications.length > 0 && <span className="bell-dot">{notifications.length}</span>}
        </button>
        {/* Account/profile can go here */}
      </div>
      {showNotifications && (
        <div className="notifications-dropdown">
          <h4>Notifications</h4>
          <ul>
            {notifications.length === 0 && <li>No new notifications.</li>}
            {notifications.map(n => (
              <li key={n.id}>{n.text}</li>
            ))}
          </ul>
        </div>
      )}
    </header>
  );

  const renderDashboard = () => (
    <div className="dashboard">
      <div className="metrics">
        <div className="metric-card">
          <span className="metric-label">Total Revenue</span>
          <span className="metric-value">${dashboardMetrics.revenue.toLocaleString()}</span>
        </div>
        <div className="metric-card">
          <span className="metric-label">Total Bookings</span>
          <span className="metric-value">{dashboardMetrics.totalBookings}</span>
        </div>
        <div className="metric-card">
          <span className="metric-label">Occupancy Rate</span>
          <span className="metric-value">{dashboardMetrics.occupancy}%</span>
        </div>
        <div className="metric-card">
          <span className="metric-label">Upcoming Check-ins</span>
          <span className="metric-value">{dashboardMetrics.checkins}</span>
        </div>
      </div>
      <div className="dashboard-visuals">
        <section className="analytics-section">
          <h3>Monthly Revenue</h3>
          <canvas id="monthlyRevenueChart" width="300" height="160" />
        </section>
        <section className="recent-activity">
          <h3>Recent Activity</h3>
          <ul>
            {dashboardMetrics.recentActivity.map(item => (
              <li key={item.id}>
                <span className={`activity-type ${item.type.toLowerCase()}`}>{item.type}:</span>
                {item.content}
              </li>
            ))}
          </ul>
        </section>
      </div>
    </div>
  );

  const renderBookings = () => (
    <div className="bookings-section">
      <div className="bookings-controls">
        <input
          type="text"
          placeholder="Search Guest"
          value={bookingSearch}
          onChange={e => setBookingSearch(e.target.value)}
        />
        <select
          value={bookingFilters.status}
          onChange={e => setBookingFilters(f => ({ ...f, status: e.target.value }))}
        >
          <option value="">All Statuses</option>
          <option value="Confirmed">Confirmed</option>
          <option value="Checked-in">Checked-in</option>
          <option value="Checked-out">Checked-out</option>
          <option value="Canceled">Canceled</option>
        </select>
        <select
          value={bookingFilters.roomType}
          onChange={e => setBookingFilters(f => ({ ...f, roomType: e.target.value }))}
        >
          <option value="">All Room Types</option>
          <option value="Standard">Standard</option>
          <option value="Deluxe">Deluxe</option>
          <option value="Suite">Suite</option>
        </select>
        <button className="btn-primary" onClick={() => setShowBookingModal(true)}>
          + New Booking
        </button>
      </div>
      <div className="table-scroll">
        <table className="bookings-table">
          <thead>
            <tr>
              <th>Guest Name</th><th>Room Type</th><th>Check-in</th><th>Check-out</th>
              <th>Status</th><th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {bookingLoading && <tr><td colSpan={6}>Loading...</td></tr>}
            {!bookingLoading && filteredBookings.length === 0 &&
              <tr><td colSpan={6}>No bookings found.</td></tr>}
            {filteredBookings.map(b => (
              <tr key={b.id}>
                <td>{b.guest}</td>
                <td>{b.roomType}</td>
                <td>{b.checkIn}</td>
                <td>{b.checkOut}</td>
                <td><span className={`booking-status ${b.status.toLowerCase()}`}>{b.status}</span></td>
                <td>
                  <button onClick={() => handleEditBooking(b.id)}>Edit</button>
                  <button onClick={() => handleCancelBooking(b.id)}>Cancel</button>
                  {b.status === "Confirmed" && <button onClick={() => handleCheckinCheckout(b.id, "Checked-in")}>Check-in</button>}
                  {b.status === "Checked-in" && <button onClick={() => handleCheckinCheckout(b.id, "Checked-out")}>Check-out</button>}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      {/* Create Booking Modal */}
      {showBookingModal &&
        <div className="modal">
          <form className="modal-content" onSubmit={handleCreateBooking}>
            <h3>New Booking</h3>
            <label>Guest Name
              <input type="text" value={bookingForm.guest} required
                onChange={e => setBookingForm(f => ({ ...f, guest: e.target.value }))}
              />
            </label>
            <label>Room
              <select value={bookingForm.room} required
                onChange={e => setBookingForm(f => ({ ...f, room: e.target.value }))}
              >
                <option value="">Select Room</option>
                {rooms.map(r => <option key={r.id} value={r.name}>{r.name}</option>)}
              </select>
            </label>
            <label>Check-in Date
              <input type="date" value={bookingForm.checkIn} required
                onChange={e => setBookingForm(f => ({ ...f, checkIn: e.target.value }))}
              />
            </label>
            <label>Check-out Date
              <input type="date" value={bookingForm.checkOut} required
                onChange={e => setBookingForm(f => ({ ...f, checkOut: e.target.value }))}
              />
            </label>
            <label>Status
              <select value={bookingForm.status}
                onChange={e => setBookingForm(f => ({ ...f, status: e.target.value }))}
              >
                <option value="Confirmed">Confirmed</option>
                <option value="Checked-in">Checked-in</option>
                <option value="Checked-out">Checked-out</option>
                <option value="Canceled">Canceled</option>
              </select>
            </label>
            <div className="modal-actions">
              <button type="button" onClick={() => setShowBookingModal(false)}>Cancel</button>
              <button className="btn-primary" type="submit">Save</button>
            </div>
          </form>
        </div>
      }
    </div>
  );

  const renderProperty = () => (
    <div className="property-section">
      <div className="property-header">
        <span>Rooms</span>
        <button className="btn-primary" onClick={() => setShowRoomModal(true)}>+ Add New Room</button>
      </div>
      <div className="rooms-list">
        {propertyLoading && <div>Loading rooms...</div>}
        {!propertyLoading && rooms.length === 0 && <div>No rooms available.</div>}
        {rooms.map(room => (
          <div className="room-card" key={room.id}>
            <img src={room.photo || 'https://via.placeholder.com/120x80'} alt={room.name} />
            <div className="room-info">
              <h4>{room.name}</h4>
              <p className="room-desc">{room.description}</p>
              <div className="room-meta">
                <span className="price">${room.price}</span>
                <span className={`room-status ${room.status.toLowerCase().replace(' ', '-')}`}>{room.status}</span>
              </div>
              <div className="room-actions">
                <button>Edit</button>
                <button>Delete</button>
              </div>
            </div>
          </div>
        ))}
      </div>
      {/* New Room Modal */}
      {showRoomModal &&
        <div className="modal">
          <form className="modal-content" onSubmit={handleCreateRoom}>
            <h3>Add New Room</h3>
            <label>Room Name
              <input type="text" value={roomForm.name} required
                onChange={e => setRoomForm(f => ({ ...f, name: e.target.value }))}
              />
            </label>
            <label>Description
              <textarea value={roomForm.description} required
                onChange={e => setRoomForm(f => ({ ...f, description: e.target.value }))}
              />
            </label>
            <label>Photo URL
              <input type="url" value={roomForm.photo}
                onChange={e => setRoomForm(f => ({ ...f, photo: e.target.value }))}
              />
            </label>
            <label>Amenities
              <input type="text" value={roomForm.amenities} placeholder="WiFi, AC, etc" required
                onChange={e => setRoomForm(f => ({ ...f, amenities: e.target.value }))}
              />
            </label>
            <label>Capacity
              <input type="number" value={roomForm.capacity} required
                onChange={e => setRoomForm(f => ({ ...f, capacity: e.target.value }))}
              />
            </label>
            <label>Price per Night
              <input type="number" value={roomForm.price} required
                onChange={e => setRoomForm(f => ({ ...f, price: e.target.value }))}
              />
            </label>
            <label>Status
              <select value={roomForm.status}
                onChange={e => setRoomForm(f => ({ ...f, status: e.target.value }))}
              >
                <option>Available</option>
                <option>Occupied</option>
                <option>Under Maintenance</option>
              </select>
            </label>
            <div className="modal-actions">
              <button type="button" onClick={() => setShowRoomModal(false)}>Cancel</button>
              <button className="btn-primary" type="submit">Save</button>
            </div>
          </form>
        </div>
      }
      <div className="availability-calendar">
        <h4>Room Availability Calendar</h4>
        <Calendar value={calendarDate} onChange={setCalendarDate} />
      </div>
    </div>
  );

  const renderUsers = () => (
    <div className="users-section">
      <div className="users-header">
        <span>Users</span>
        <button className="btn-primary" onClick={() => setShowUserModal(true)}>+ Add New User</button>
      </div>
      {userLoading ? <div>Loading users...</div> :
        <div className="table-scroll">
          <table className="users-table">
            <thead>
              <tr><th>Name</th><th>Email</th><th>Role</th><th>Actions</th></tr>
            </thead>
            <tbody>
              {users.map(u => (
                <tr key={u.id}>
                  <td>
                    <button className="link" onClick={() => { setSelectedUser(u); setShowUserHistory(true); }}>
                      {u.name}
                    </button>
                  </td>
                  <td>{u.email}</td>
                  <td>{u.role}</td>
                  <td>
                    <button>Edit</button>
                    <button>Delete</button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      }
      {/* Add User Modal */}
      {showUserModal &&
        <div className="modal">
          <form className="modal-content" onSubmit={handleCreateUser}>
            <h3>Add New User</h3>
            <label>Name
              <input type="text" value={userForm.name} required
                onChange={e => setUserForm(f => ({ ...f, name: e.target.value }))}
              />
            </label>
            <label>Email
              <input type="email" value={userForm.email} required
                onChange={e => setUserForm(f => ({ ...f, email: e.target.value }))}
              />
            </label>
            <label>Password
              <input type="password" value={userForm.password} required
                onChange={e => setUserForm(f => ({ ...f, password: e.target.value }))}
              />
            </label>
            <label>Role
              <select value={userForm.role}
                onChange={e => setUserForm(f => ({ ...f, role: e.target.value }))}
              >
                <option>Admin</option>
                <option>Staff</option>
                <option>Customer</option>
              </select>
            </label>
            <div className="modal-actions">
              <button type="button" onClick={() => setShowUserModal(false)}>Cancel</button>
              <button className="btn-primary" type="submit">Save</button>
            </div>
          </form>
        </div>
      }
      {/* User Booking History Modal */}
      {showUserHistory && selectedUser &&
        <div className="modal">
          <div className="modal-content">
            <h3>{selectedUser.name}'s Booking History</h3>
            {/* You could fetch or show booking data related to selectedUser */}
            <ul>
              {bookings.filter(b => b.guest === selectedUser.name).map(b => (
                <li key={b.id}>
                  Room: {b.roomType}, From: {b.checkIn} to {b.checkOut}, Status: {b.status}
                </li>
              ))}
            </ul>
            <div className="modal-actions">
              <button type="button" onClick={() => setShowUserHistory(false)}>Close</button>
            </div>
          </div>
        </div>
      }
    </div>
  );

  const renderPayments = () => (
    <div className="payments-section">
      <div className="table-scroll">
        <table className="payments-table">
          <thead>
            <tr>
              <th>Transaction ID</th>
              <th>Guest Name</th>
              <th>Amount</th>
              <th>Date</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {paymentsLoading && <tr><td colSpan={6}>Loading payments...</td></tr>}
            {!paymentsLoading && payments.length === 0 && <tr><td colSpan={6}>No payments found.</td></tr>}
            {payments.map(p => (
              <tr key={p.id}>
                <td>{p.transactionId}</td>
                <td>{p.guest}</td>
                <td>${p.amount}</td>
                <td>{p.date}</td>
                <td><span className={`payment-status ${p.status.toLowerCase()}`}>{p.status}</span></td>
                <td>
                  {p.status === 'Completed' &&
                    <button onClick={() => {/* API call for refund */}}>Process Refund</button>}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      <form className="report-form">
        <h4>Generate Financial Report</h4>
        <label>Date Range
          <input type="date" value={reportParams.start}
            onChange={e => setReportParams(f => ({ ...f, start: e.target.value }))}
          /> -
          <input type="date" value={reportParams.end}
            onChange={e => setReportParams(f => ({ ...f, end: e.target.value }))}
          />
        </label>
        <label>Status
          <select value={reportParams.status}
            onChange={e => setReportParams(f => ({ ...f, status: e.target.value }))}
          >
            <option value="">All</option>
            <option>Completed</option>
            <option>Refunded</option>
            <option>Pending</option>
          </select>
        </label>
        <label>Type
          <select value={reportParams.type}
            onChange={e => setReportParams(f => ({ ...f, type: e.target.value }))}
          >
            <option value="">All</option>
            <option>Booking</option>
            <option>Refund</option>
          </select>
        </label>
        <button className="btn-primary" type="button">Generate Report</button>
      </form>
    </div>
  );

  const renderMarketing = () => (
    <div className="marketing-section">
      <div className="marketing-header">
        <span>Active Promotions & Coupons</span>
      </div>
      <div className="promo-list">
        {promotions.length === 0 && <div>No promotions defined.</div>}
        {promotions.map(p => (
          <div className="promo-item" key={p.id}>
            <div className="promo-main">
              <span className="promo-name">{p.name} <span className="promo-code">{p.code}</span></span>
              <span className={`promo-discount ${p.discountType}`}>{p.discountType} {p.value}</span>
            </div>
            <div className="promo-validity">
              Valid: {p.start} - {p.end}
            </div>
          </div>
        ))}
      </div>
      <form className="promo-form" onSubmit={handleCreatePromotion}>
        <h4>Create New Promotion</h4>
        <label>Promotion Name
          <input type="text" value={promoForm.name} required
            onChange={e => setPromoForm(f => ({ ...f, name: e.target.value }))}
          />
        </label>
        <label>Code
          <input type="text" value={promoForm.code} required
            onChange={e => setPromoForm(f => ({ ...f, code: e.target.value }))}
          />
        </label>
        <label>Discount Type
          <select value={promoForm.discountType} required
            onChange={e => setPromoForm(f => ({ ...f, discountType: e.target.value }))}
          >
            <option value="">Select</option>
            <option value="% off">% off</option>
            <option value="Fixed amount">Fixed amount</option>
          </select>
        </label>
        <label>Value
          <input type="number" value={promoForm.value} required
            onChange={e => setPromoForm(f => ({ ...f, value: e.target.value }))}
          />
        </label>
        <label>Valid From
          <input type="date" value={promoForm.start} required
            onChange={e => setPromoForm(f => ({ ...f, start: e.target.value }))}
          />
        </label>
        <label>Valid To
          <input type="date" value={promoForm.end} required
            onChange={e => setPromoForm(f => ({ ...f, end: e.target.value }))}
          />
        </label>
        <button className="btn-primary" type="submit">Create</button>
      </form>
    </div>
  );

  // ---- MAIN RENDER ----
  return (
    <div className="admin-dashboard">
      {renderSidebar()}
      <div className="main-area">
        {renderHeader()}
        <main>
          {activeSection === "Dashboard" && renderDashboard()}
          {activeSection === "Bookings" && renderBookings()}
          {activeSection === "Property" && renderProperty()}
          {activeSection === "Users" && renderUsers()}
          {activeSection === "Payments" && renderPayments()}
          {activeSection === "Marketing" && renderMarketing()}
        </main>
      </div>
    </div>
  );
}








:root {
  --color-bg: #f6f7fb;
  --color-accent: #6366f1;
  --color-dark: #2d2e32;
  --color-light: #fff;
  --color-muted: #a0aec0;
  --card-radius: 12px;
  --transition: 0.2s all cubic-bezier(.4,0,.2,1);
}

body {
  font-family: 'Segoe UI', Arial, sans-serif;
}

.admin-dashboard {
  display: flex;
  background: var(--color-bg);
  min-height: 100vh;
}

.sidebar {
  background: var(--color-light);
  border-right: 1px solid #ebecef;
  width: 220px;
  display: flex;
  flex-direction: column;
  padding: 24px 0 0 0;
}

.sidebar-header {
  display: flex;
  align-items: center;
  font-size: 1.2rem;
  font-weight: bold;
  padding: 0 18px 24px 18px;
}

.sidebar-logo {
  margin-right: 12px;
  color: var(--color-accent);
  font-size: 1.7rem;
}

.sidebar-link {
  background: none;
  border: 0;
  outline: none;
  display: flex;
  align-items: center;
  width: 100%;
  font: inherit;
  font-weight: 500;
  gap: 14px;
  padding: 14px 18px;
  color: var(--color-dark);
  cursor: pointer;
  border-left: 4px solid transparent;
  transition: var(--transition);
}
.sidebar-link.active,
.sidebar-link:hover {
  background: #eceffd;
  border-left: 4px solid var(--color-accent);
  color: var(--color-accent);
}

/* Main Area */
.main-area {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
}

.main-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 24px 32px 10px 32px;
  background: var(--color-light);
  box-shadow: 0 1px 6px #eee;
  position: relative;
  z-index: 2;
}

.main-header h1 {
  font-size: 1.6rem;
  font-weight: 700;
}

.header-actions {
  display: flex;
  align-items: center;
  gap: 20px;
}

.notification-bell {
  background: none;
  border: 0;
  color: var(--color-accent);
  position: relative;
  font-size: 1.4rem;
  cursor: pointer;
  transition: color var(--transition);
}
.bell-dot {
  position: absolute;
  right: 0;
  top: 0;
  background: #f87171;
  color: #fff;
  border-radius: 50%;
  width: 17px;
  height: 17px;
  font-size: 0.9rem;
  display: flex;
  align-items: center;
  justify-content: center;
}

.notifications-dropdown {
  position: absolute;
  right: 32px;
  top: 62px;
  background: #fff;
  box-shadow: 0 4px 14px rgba(60,60,60,.12);
  border-radius: 8px;
  width: 300px;
  padding: 16px;
  z-index: 5;
  animation: dropdownFadeIn .28s cubic-bezier(.4,0,.2,1);
}
@keyframes dropdownFadeIn {
  from { opacity: 0; transform: translateY(-10px);}
  to { opacity: 1; transform: translateY(0);}
}
.notifications-dropdown h4 {
  margin-top: 0; margin-bottom: 8px;
}
.notifications-dropdown ul {margin:0; padding:0;}
.notifications-dropdown li {
  list-style: none;
  padding: 7px 0;
  border-bottom: 1px solid #f0f1f3;
  font-size: 0.97rem;
}
/* Dashboard metrics */
.metrics {
  display: flex;
  gap: 28px;
  padding: 28px 36px 10px 36px;
  margin-bottom: 14px;
}
.metric-card {
  flex: 1;
  background: var(--color-light);
  border-radius: var(--card-radius);
  padding: 26px 18px 19px 26px;
  display: flex;
  flex-direction: column;
  box-shadow: 0 2px 8px #ededfaeb;
  transition: box-shadow var(--transition), transform var(--transition);
}
.metric-card:hover {
  box-shadow: 0 4px 16px #dbd3ff4a;
  transform: translateY(-5px) scale(1.03);
}
.metric-label {
  color: var(--color-muted);
  font-size: 1rem;
  margin-bottom: 5px;
}
.metric-value {
  font-size: 2.2rem;
  font-weight: bold;
  color: var(--color-accent);
}
.dashboard-visuals {
  display: flex;
  gap: 38px;
  padding: 0 36px 24px 36px;
}
.analytics-section,
.recent-activity {
  background: #fff;
  border-radius: var(--card-radius);
  box-shadow: 0 2px 12px #eceffd52;
  flex: 1 1 0;
  padding: 23px 19px;
  transition: box-shadow var(--transition);
}
.analytics-section h3,
.recent-activity h3 {
  margin-top: 0;
  font-size: 1.17rem;
}
.recent-activity ul {padding-left:0;}
.recent-activity li {
  font-size: 1.01rem;
  list-style: none;
  border-bottom: 1px solid #f2f2fd;
  padding: 8px 0;
}
.activity-type {
  font-weight: 600;
  margin-right: 6px;
}
.activity-type.booking { color: #6366f1;}
.activity-type.cancellation { color: #f87171;}
.activity-type["check-in"] { color: #22c55e;}
/* Bookings Table */
.bookings-section, .users-section, .payments-section, .marketing-section {
  padding: 32px 36px;
}
.bookings-controls, .users-header, .property-header, .marketing-header {
  display: flex;
  gap: 14px;
  align-items: center;
  margin-bottom: 20px;
}
.bookings-controls input,
.bookings-controls select {
  font-size: 1rem;
  padding: 7px 11px;
  border: 1px solid #eceafd;
  border-radius: 6px;
  margin-right: 10px;
}
.btn-primary {
  background: var(--color-accent);
  color: #fff;
  border: none;
  border-radius: 6px;
  padding: 10px 18px;
  font-weight: 600;
  margin-left: 7px;
  cursor: pointer;
  transition: background var(--transition), box-shadow var(--transition), transform var(--transition);
}
.btn-primary:hover { background: #4e51c3; transform: translateY(-2px) scale(1.04);}
.table-scroll { overflow-x: auto; }
.bookings-table, .users-table, .payments-table {
  width: 100%;
  border-collapse: collapse;
  background: #fff;
  border-radius: 10px;
  box-shadow: 0 2px 8px #eceffd81;
}

.bookings-table th, .bookings-table td,
.users-table th, .users-table td,
.payments-table th, .payments-table td {
  padding: 13px 17px;
  font-size: 1rem;
}
.bookings-table tbody tr:hover, .users-table tbody tr:hover, .payments-table tbody tr:hover {
  background: #f5f5fa;
  transition: background var(--transition);
}
.bookings-table th, .users-table th, .payments-table th { background: #f2f5ff; color: var(--color-accent); }
.booking-status.confirmed, .payment-status.completed { color: #6366f1; font-weight: bold;}
.booking-status.checked-in { color: #22c55e; font-weight: bold;}
.booking-status.checked-out { color: #60a5fa;}
.booking-status.canceled, .payment-status.refunded { color: #f87171;}
/* Room Cards */
.property-section { max-width: 1300px; margin: 0 auto; }
.rooms-list {
  display: flex;
  flex-wrap: wrap;
  gap: 26px;
}
.room-card {
  background: #fff;
  border-radius: var(--card-radius);
  box-shadow: 0 2px 10px #d7d8ff38;
  display: flex;
  flex-direction: row;
  width: 330px;
  margin-bottom: 24px;
  transition: transform 0.15s cubic-bezier(.4,0,.2,1), box-shadow var(--transition);
}
.room-card:hover {
  transform: translateY(-4px) scale(1.03);
  box-shadow: 0 8px 30px #beb5fd37;
}
.room-card img {
  width: 120px;
  height: 90px;
  object-fit: cover;
  border-radius: var(--card-radius) 0 0 var(--card-radius);
}
.room-info {
  flex: 1;
  padding: 14px 15px;
  display: flex;
  flex-direction: column;
}
.room-info h4 {margin:0 0 3px 0; color: var(--color-accent);}
.room-desc { font-size: 0.93rem; color: #777;}
.room-meta {
  margin-top: 6px;
  font-size: 0.97rem;
  display: flex;
  gap: 13px;
  align-items: center;
}
.price { font-weight: 600; color: #f59e42;}
.room-status { font-weight: bold; margin-left: 6px;}
.room-status.available { color: #22c55e;}
.room-status.occupied { color: #f59e42;}
.room-status.under-maintenance { color: #f87171;}
.room-actions { margin-top: auto; display: flex; gap: 7px;}
.room-actions button {
  background: #f1f3ff;
  border: none;
  border-radius: 5px;
  color: var(--color-accent);
  font-weight: bold;
  padding: 5px 11px;
  cursor: pointer;
  transition: background 0.09s;
}
.room-actions button:hover {background: #e0e7ff;}
/* Modal */
.modal {
  position: fixed;
  inset: 0;
  background: rgba(60,65,70,.12);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 999;
  animation: modalFadeIn .19s cubic-bezier(.4,0,.2,1);
}
@keyframes modalFadeIn {
  from { opacity: 0; }
  to { opacity: 1;}
}
.modal-content {
  background: #fff;
  border-radius: 13px;
  box-shadow: 0 6px 40px #8a8efc4b;
  padding: 32px 34px 17px 34px;
  max-width: 96vw;
  min-width: 300px;
}
.modal-content h3, .modal-content h4 { margin-top: 0;}
.modal-content label {
  display: block;
  margin-bottom: 13px;
  font-size: 1.05rem;
}
.modal-content input,
.modal-content textarea,
.modal-content select {
  display: block;
  width: 100%;
  margin-top: 3px;
  margin-bottom: 9px;
  padding: 8px 12px;
  border-radius: 6px;
  border: 1px solid #e5e5ec;
  font-size: 0.98rem;
}
.modal-actions {
  display: flex;
  gap: 14px;
  justify-content: flex-end;
  margin-top: 8px;
}

.link {
  background: none;
  border: none;
  color: var(--color-accent);
  cursor: pointer;
  text-decoration: underline;
  font-size: 1.01rem;
}
.link:hover { color: #4e51c3;}

.availability-calendar {
  margin-top: 28px;
  background: #fff;
  border-radius: var(--card-radius);
  box-shadow: 0 2px 10px #e7dcffd4;
  max-width: 360px;
  padding: 20px;
}
.promo-list {
  margin: 10px 0 30px 0;
  display: flex;
  flex-direction: column;
  gap: 19px;
}
.promo-item {
  border: 1px solid #e8eafd;
  background: #fff;
  border-radius: 8px;
  padding: 16px 15px;
  font-size: 1.08rem;
  display: flex;
  flex-direction: column;
  gap: 7px;
}
.promo-main {display: flex; justify-content: space-between;}
.promo-name {font-weight: 700;}
.promo-code {
  color: var(--color-accent);
  background: #eceffd;
  margin-left: 10px;
  padding: 3px 7px;
  border-radius: 5px;
  font-size: 0.97rem;
}
.promo-discount['% off'] { color: #24ca21;}
.promo-discount['Fixed amount'] { color: #fba02d;}
.promo-validity { font-size: 0.98rem; color: #6b7280;}
.promo-form label { display: block; margin-bottom: 10px;}
/* Responsive */
@media (max-width: 999px) {
  .metrics,
  .dashboard-visuals,
  .rooms-list {
    flex-direction: column;
    gap: 18px;
  }
  .main-header {
    padding: 20px 16px 12px 12px;
  }
  .bookings-section, .users-section, .payments-section, .property-section, .marketing-section {
    padding: 19px 6vw;
  }
}
@media (max-width: 600px) {
  .sidebar { display: none;}
  .main-area { padding-left: 0;}
  .dashboard-visuals {gap: 16px;}
}







import React, { useState, useEffect } from 'react';
import './SearchResults.css';
import { FaPlane, FaBook, FaUserTie, FaUsers, FaMoneyBill, FaTags, FaChartBar, FaBell } from 'react-icons/fa';
import { Chart } from 'chart.js/auto';

// DUMMY DATA for sidebar, notifications, etc.
const SIDEBAR_MENU = [
  { name: "Dashboard", icon: <FaChartBar /> },
  { name: "Bookings", icon: <FaBook /> },
  { name: "Flights", icon: <FaPlane /> },
  { name: "Users", icon: <FaUsers /> },
  { name: "Finance", icon: <FaMoneyBill /> },
  { name: "Promotions", icon: <FaTags /> },
];

const SAMPLE_NOTIFICATIONS = [
  { id: 1, message: "New booking: Jane Doe - Flight AX123" },
  { id: 2, message: "Flight JL401 updated departure time." },
  { id: 3, message: "Refund issued: $750 to Michael S." },
];

export default function FlightAdminDashboard() {
  // Section state
  const [activeSection, setActiveSection] = useState('Dashboard');
  // Notifications
  const [showNotifications, setShowNotifications] = useState(false);
  const [notifications, setNotifications] = useState(SAMPLE_NOTIFICATIONS);

  // ------------- DASHBOARD/ANALYTICS --------------
  const [metrics, setMetrics] = useState({
    totalBookings: 5200,
    totalRevenue: 550000,
    flightsScheduled: 850,
    upcomingDepartures: 45,
    monthlyBookings: [800, 1200, 1500],
    months: ["May", "Jun", "Jul"],
    revenueByRoute: [
      { route: 'NYC-LHR', revenue: 110000 },
      { route: 'SFO-NRT', revenue: 98000 },
      { route: 'JFK-DXB', revenue: 88000 },
      { route: 'LHR-CDG', revenue: 41000 },
    ],
    recent: [
      { id:1, type:"Booking", content:"Jane Doe booked AX123 (NYC-LHR)." },
      { id:2, type:"Change", content:"Flight BA456 delayed due to weather." },
      { id:3, type:"Cancel", content:"Peter Lee canceled SX305." }
    ]
  });

  // Animated metric cards
  const [animatedCounts, setAnimatedCounts] = useState({
    totalBookings: 0, totalRevenue: 0, flightsScheduled: 0, upcomingDepartures: 0
  });
  useEffect(() => {
    // Animate numbers in dashboard section
    if (activeSection === "Dashboard") {
      let i = 0;
      const intv = setInterval(() => {
        setAnimatedCounts({
          totalBookings: Math.min(metrics.totalBookings, Math.floor(i * metrics.totalBookings / 40)),
          totalRevenue: Math.min(metrics.totalRevenue, Math.floor(i * metrics.totalRevenue / 40)),
          flightsScheduled: Math.min(metrics.flightsScheduled, Math.floor(i * metrics.flightsScheduled / 40)),
          upcomingDepartures: Math.min(metrics.upcomingDepartures, Math.floor(i * metrics.upcomingDepartures / 40)),
        });
        i++;
        if (i > 40) clearInterval(intv);
      }, 16);
      return () => clearInterval(intv);
    } else {
      setAnimatedCounts({ totalBookings: 0, totalRevenue: 0, flightsScheduled: 0, upcomingDepartures: 0 });
    }
    // eslint-disable-next-line
  }, [activeSection, metrics]);

  useEffect(() => {
    if (activeSection === "Dashboard") {
      // Bookings per month chart
      const bookingsId = 'bookingsChart';
      const bookingsCanvas = document.getElementById(bookingsId);
      if (bookingsCanvas && Chart.getChart(bookingsId)) Chart.getChart(bookingsId).destroy();
      if (bookingsCanvas) {
        const ctx = bookingsCanvas.getContext('2d');
        new Chart(ctx, {
          type: 'bar',
          data: {
            labels: metrics.months,
            datasets: [{
              label: 'Monthly Bookings',
              data: metrics.monthlyBookings,
              backgroundColor: '#6366f1',
              borderRadius: 8,
            }]
          },
          options: {
            plugins: { legend: { display: false } },
            responsive: true,
            scales: { y: { beginAtZero: true } }
          }
        });
      }
      // Revenue by route
      const revenueId = 'revenueChart';
      const revenueCanvas = document.getElementById(revenueId);
      if (revenueCanvas && Chart.getChart(revenueId)) Chart.getChart(revenueId).destroy();
      if (revenueCanvas) {
        const ctx = revenueCanvas.getContext('2d');
        new Chart(ctx, {
          type: 'pie',
          data: {
            labels: metrics.revenueByRoute.map(r => r.route),
            datasets: [{
              data: metrics.revenueByRoute.map(r => r.revenue),
              backgroundColor: [
                '#6366f1', '#16a597', '#f59e42', '#f87171'
              ]
            }],
          },
          options: {
            plugins: { legend: { position: 'bottom' } }
          }
        });
      }
    }
    // eslint-disable-next-line
  }, [activeSection, metrics]);

  // ------------- BOOKINGS --------------
  const [bookings, setBookings] = useState([]);
  const [bookingFilters, setBookingFilters] = useState({ search: '', date: '', flight: '' });
  const [bookingLoading, setBookingLoading] = useState(true);
  const [showBookingModal, setShowBookingModal] = useState(false);
  const [showBookingDetails, setShowBookingDetails] = useState(false);
  const [selectedBooking, setSelectedBooking] = useState(null);
  const [newBookingForm, setNewBookingForm] = useState({ passenger: '', flight: '', fareClass: 'Economy' });

  useEffect(() => {
    setBookingLoading(true);
    fetch('/api/bookings')
      .then(res => res.json())
      .then(data => setBookings(data))
      .catch(() => {})
      .finally(() => setBookingLoading(false));
  }, []); // Normally include dependencies

  // ------------- FLIGHT & INVENTORY --------------
  const [flights, setFlights] = useState([]);
  const [flightLoading, setFlightLoading] = useState(true);
  const [showFlightModal, setShowFlightModal] = useState(false);
  const [showSeatMap, setShowSeatMap] = useState(false);
  const [selectedFlight, setSelectedFlight] = useState(null);
  const [flightForm, setFlightForm] = useState({
    airline:'', number:'', origin:'', dest:'', dep:'', arr:'', seats:180
  });
  useEffect(() => {
    setFlightLoading(true);
    fetch('/api/flights')
      .then(res => res.json())
      .then(data => setFlights(data))
      .catch(() => {})
      .finally(() => setFlightLoading(false));
  }, []);

  // ------------- USERS & AGENTS --------------
  const [users, setUsers] = useState([]);
  const [userLoading, setUserLoading] = useState(true);
  const [userForm, setUserForm] = useState({ name:'', email:'', password:'', role:'Customer' });
  const [showUserModal, setShowUserModal] = useState(false);
  const [agents, setAgents] = useState([]);
  useEffect(() => {
    setUserLoading(true);
    fetch('/api/users')
      .then(res => res.json())
      .then(data => setUsers(data))
      .catch(() => {})
      .finally(() => setUserLoading(false));
    // Agents
    fetch('/api/agents')
      .then(res => res.json())
      .then(data => setAgents(data));
  }, []);

  // ------------- FINANCE --------------
  const [payments, setPayments] = useState([]);
  const [financeLoading, setFinanceLoading] = useState(true);
  const [reportParams, setReportParams] = useState({ start:'', end:'', gateway:'', route:'' });
  useEffect(() => {
    setFinanceLoading(true);
    fetch('/api/payments')
      .then(res => res.json())
      .then(data => setPayments(data))
      .catch(() => {})
      .finally(() => setFinanceLoading(false));
  }, []);

  // ------------- PROMOTIONS --------------
  const [promotions, setPromotions] = useState([]);
  const [promoForm, setPromoForm] = useState({ name:'', code:'', type:'', value:'', start:'', end:'' });
  useEffect(() => {
    fetch('/api/promotions')
      .then(res => res.json())
      .then(data => setPromotions(data));
  }, []);

  //------------------- HANDLERS (placeholder stubs) --------------------
  const handleCreateBooking = e => { e.preventDefault(); setShowBookingModal(false); };
  const handleEditBooking = booking => {};
  const handleCancelBooking = booking => {};
  const handleViewBooking = booking => { setSelectedBooking(booking); setShowBookingDetails(true); };
  const handleCreateUser = e => { e.preventDefault(); setShowUserModal(false); };
  const handleCreateFlight = e => { e.preventDefault(); setShowFlightModal(false); };
  const handleCreatePromotion = e => { e.preventDefault(); };

  //------------------- RENDERS ------------------------

  // ---- SIDEBAR ----
  const renderSidebar = () => (
    <aside className="flight-sidebar">
      <div className="sidebar-title">
        <FaPlane className="sidebar-logo" />
        <span>Flight Admin</span>
      </div>
      <nav>
        {SIDEBAR_MENU.map(item => (
          <button
            key={item.name}
            className={`sidebar-link ${activeSection === item.name ? 'active' : ''}`}
            onClick={() => setActiveSection(item.name)}
          >
            {item.icon}
            <span>{item.name}</span>
          </button>
        ))}
      </nav>
    </aside>
  );

  // ---- HEADER ----
  const renderHeader = () => (
    <header className="flight-main-header">
      <h1>{activeSection}</h1>
      <div>
        <button className="notification-bell"
                aria-label="Show notifications"
                onClick={() => setShowNotifications(!showNotifications)}>
          <FaBell />
          {notifications.length > 0 && <span className="bell-dot">{notifications.length}</span>}
        </button>
        {/* Account/profile etc. */}
      </div>
      {showNotifications &&
        <div className="notifications-dropdown animate-fade-in">
          <h4>Notifications</h4>
          <ul>
            {notifications.length === 0 && <li>No notifications.</li>}
            {notifications.map(n => (<li key={n.id}>{n.message}</li>))}
          </ul>
        </div>
      }
    </header>
  );

  // ---- DASHBOARD ----
  const renderDashboard = () => (
    <div className="flight-dashboard">
      <div className="metric-cards">
        <div className="metric-card animate-pop">
          <span className="metric-label">Total Bookings</span>
          <span className="metric-value">{animatedCounts.totalBookings.toLocaleString()}</span>
        </div>
        <div className="metric-card animate-pop">
          <span className="metric-label">Total Revenue</span>
          <span className="metric-value">${animatedCounts.totalRevenue.toLocaleString()}</span>
        </div>
        <div className="metric-card animate-pop">
          <span className="metric-label">Flights Scheduled</span>
          <span className="metric-value">{animatedCounts.flightsScheduled}</span>
        </div>
        <div className="metric-card animate-pop">
          <span className="metric-label">Upcoming Departures</span>
          <span className="metric-value">{animatedCounts.upcomingDepartures}</span>
        </div>
      </div>
      <div className="dashboard-charts">
        <section>
          <h3>Monthly Bookings</h3>
          <canvas id="bookingsChart" width={260} height={140}></canvas>
        </section>
        <section>
          <h3>Revenue by Route</h3>
          <canvas id="revenueChart" width={260} height={160}></canvas>
        </section>
        <section className="recent-activity">
          <h3>Recent Activity</h3>
          <ul>
            {metrics.recent.map(item => (
              <li key={item.id}>
                <span className={`activity-type ${item.type.toLowerCase()}`}>{item.type}:</span>
                {item.content}
              </li>
            ))}
          </ul>
        </section>
      </div>
    </div>
  );

  // ---- BOOKINGS ----  
  const filteredBookings = bookings.filter(b =>
    (bookingFilters.search === "" || b.guest.toLowerCase().includes(bookingFilters.search.toLowerCase())) &&
    (bookingFilters.flight === "" || b.flightNumber.toLowerCase().includes(bookingFilters.flight.toLowerCase()))
    // Add more filter logic as needed
  );
  const renderBookings = () => (
    <div className="bookings-section">
      <div className="section-controls">
        <input
          type="text"
          placeholder="Search passenger"
          value={bookingFilters.search}
          onChange={e => setBookingFilters(f => ({ ...f, search: e.target.value }))}
        />
        <input
          type="text"
          placeholder="Flight Number"
          value={bookingFilters.flight}
          onChange={e => setBookingFilters(f => ({ ...f, flight: e.target.value }))}
        />
        <input
          type="date"
          value={bookingFilters.date}
          onChange={e => setBookingFilters(f => ({ ...f, date: e.target.value }))}
        />
        <button className="btn-primary ripple" onClick={() => setShowBookingModal(true)}>+ New Booking</button>
      </div>
      <div className="table-scroll">
        <table className="bookings-table">
          <thead>
            <tr>
              <th>Passenger</th><th>Flight</th><th>Departure</th><th>Arrival</th>
              <th>Status</th><th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {bookingLoading && <tr><td colSpan={6}>Loading...</td></tr>}
            {!bookingLoading && filteredBookings.length === 0 && <tr><td colSpan={6}>No bookings found.</td></tr>}
            {filteredBookings.map(b => (
              <tr key={b.id}>
                <td>{b.guest}</td>
                <td>{b.flightNumber}</td>
                <td>{b.departure}</td>
                <td>{b.arrival}</td>
                <td><span className={`booking-status ${b.status.toLowerCase()}`}>{b.status}</span></td>
                <td>
                  <button className="btn-action" onClick={() => handleEditBooking(b)}>Edit</button>
                  <button className="btn-action" onClick={() => handleCancelBooking(b)}>Cancel</button>
                  <button className="btn-action" onClick={() => handleViewBooking(b)}>View Details</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      {showBookingModal &&
        <div className="modal animate-fade-in">
          <form className="modal-content" onSubmit={handleCreateBooking}>
            <h3>New Booking</h3>
            <label>Passenger Name
              <input type="text" required value={newBookingForm.passenger}
                     onChange={e => setNewBookingForm(f => ({ ...f, passenger: e.target.value }))} />
            </label>
            <label>Flight
              <select required value={newBookingForm.flight}
                      onChange={e => setNewBookingForm(f => ({ ...f, flight: e.target.value }))}>
                <option value="">Select Flight</option>
                {flights.map(f => <option key={f.id} value={f.number}>{f.airline} {f.number} ({f.origin}-{f.dest})</option>)}
              </select>
            </label>
            <label>Fare Class
              <select value={newBookingForm.fareClass}
                      onChange={e => setNewBookingForm(f => ({ ...f, fareClass: e.target.value }))}>
                <option>Economy</option><option>Business</option><option>First</option>
              </select>
            </label>
            <div className="modal-actions">
              <button type="button" onClick={() => setShowBookingModal(false)}>Cancel</button>
              <button className="btn-primary" type="submit">Save</button>
            </div>
          </form>
        </div>
      }
      {showBookingDetails && selectedBooking &&
        <div className="modal animate-fade-in">
          <div className="modal-content">
            <h3>Booking Details</h3>
            <p><strong>Passenger:</strong> {selectedBooking.guest}</p>
            <p><strong>Flight:</strong> {selectedBooking.flightNumber}</p>
            <p><strong>Status:</strong> <span className={`booking-status ${selectedBooking.status.toLowerCase()}`}>{selectedBooking.status}</span></p>
            <p><strong>Payment:</strong> {selectedBooking.paymentStatus}</p>
            {/* Add other info as needed */}
            <div className="modal-actions">
              <button type="button" onClick={() => setShowBookingDetails(false)}>Close</button>
            </div>
          </div>
        </div>
      }
    </div>
  );

  // ---- FLIGHT/INVENTORY ----
  const renderFlights = () => (
    <div className="flights-section">
      <div className="section-controls">
        <span>Flights</span>
        <button className="btn-primary ripple" onClick={() => setShowFlightModal(true)}>+ Add Flight</button>
      </div>
      <div className="flight-cards">
        {flightLoading && <div>Loading flights...</div>}
        {flights.length === 0 && !flightLoading && <div>No flights scheduled.</div>}
        {flights.map(f => (
          <div className="flight-card animate-pop" key={f.id}>
            <div className="flight-card-header">
              <span className="card-airline">{f.airline || "Airline"}</span>
              <span className="card-flight-number">{f.number}</span>
            </div>
            <div className="card-route">{f.origin} ➔ {f.dest}</div>
            <div className="card-times">
              <span>{f.dep} Depart</span>
              <span>{f.arr} Arrive</span>
            </div>
            <div className="card-seats">{f.seats} seats</div>
            <div className="flight-card-actions">
              <button className="btn-action">Edit</button>
              <button className="btn-action">Manage Fares</button>
              <button className="btn-action" onClick={() => {setSelectedFlight(f); setShowSeatMap(true)}}>View Seat Map</button>
            </div>
          </div>
        ))}
      </div>
      {showFlightModal &&
        <div className="modal animate-fade-in">
          <form className="modal-content" onSubmit={handleCreateFlight}>
            <h3>Add New Flight</h3>
            <label>Airline
              <input type="text" required value={flightForm.airline}
                onChange={e => setFlightForm(f => ({...f, airline:e.target.value}))} />
            </label>
            <label>Flight Number
              <input type="text" required value={flightForm.number}
                onChange={e => setFlightForm(f => ({ ...f, number:e.target.value}))} />
            </label>
            <label>Origin
              <input type="text" required value={flightForm.origin}
                onChange={e => setFlightForm(f => ({ ...f, origin:e.target.value}))} />
            </label>
            <label>Destination
              <input type="text" required value={flightForm.dest}
                onChange={e => setFlightForm(f => ({ ...f, dest:e.target.value}))} />
            </label>
            <label>Departure Time
              <input type="datetime-local" required value={flightForm.dep}
                onChange={e => setFlightForm(f => ({ ...f, dep:e.target.value}))} />
            </label>
            <label>Arrival Time
              <input type="datetime-local" required value={flightForm.arr}
                onChange={e => setFlightForm(f => ({ ...f, arr:e.target.value}))} />
            </label>
            <label>Available Seats
              <input type="number" required value={flightForm.seats}
                onChange={e => setFlightForm(f => ({ ...f, seats:e.target.value}))} />
            </label>
            <div className="modal-actions">
              <button type="button" onClick={() => setShowFlightModal(false)}>Cancel</button>
              <button className="btn-primary" type="submit">Save</button>
            </div>
          </form>
        </div>
      }
      {showSeatMap && selectedFlight &&
        <div className="modal animate-fade-in">
          <div className="modal-content seat-map-modal">
            <h3>Seat Map: {selectedFlight.airline} {selectedFlight.number}</h3>
            <div className="seat-map-grid" aria-label="Flight seat map">
              {[...Array(6)].map((row, i) => (
                <div className="seat-row" key={i}>
                  {[...Array(6)].map((col, j) => (
                    <div className={`seat animate-seat ${Math.random()<0.2?'blocked':''}`} tabIndex={0} aria-label={`Seat ${i+1}${String.fromCharCode(65+j)}`} key={j}></div>
                  ))}
                </div>
              ))}
            </div>
            <div className="modal-actions">
              <button type="button" onClick={() => setShowSeatMap(false)}>Close</button>
            </div>
          </div>
        </div>
      }
    </div>
  );

  // ---- USERS/AGENTS ----
  const renderUsers = () => (
    <div className="users-section">
      <div className="section-controls">
        <span>All users</span>
        <button className="btn-primary ripple" onClick={() => setShowUserModal(true)}>+ Add User</button>
      </div>
      {userLoading ? <div>Loading users...</div> :
        <div className="table-scroll">
          <table className="users-table">
            <thead>
              <tr><th>Name</th><th>Email</th><th>Role</th><th>Actions</th></tr>
            </thead>
            <tbody>
              {users.map(u => (
                <tr key={u.id}>
                  <td>{u.name}</td>
                  <td>{u.email}</td>
                  <td>{u.role}</td>
                  <td>
                    <button className="btn-action">Edit</button>
                    <button className="btn-action">Delete</button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      }
      <h4>Agent Management</h4>
      <div className="table-scroll">
        <table className="agents-table">
          <thead>
            <tr><th>Agent</th><th>Email</th><th>Commission %</th><th>Bookings</th></tr>
          </thead>
          <tbody>
            {agents.map(a => (
              <tr key={a.id}>
                <td>{a.name}</td>
                <td>{a.email}</td>
                <td>{a.commission}</td>
                <td>
                  <button className="btn-action">View Bookings</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      {showUserModal &&
        <div className="modal animate-fade-in">
          <form className="modal-content" onSubmit={handleCreateUser}>
            <h3>Add New User</h3>
            <label>Name
              <input type="text" required value={userForm.name}
                onChange={e => setUserForm(f => ({...f, name:e.target.value}))} />
            </label>
            <label>Email
              <input type="email" required value={userForm.email}
                onChange={e => setUserForm(f => ({...f, email:e.target.value}))} />
            </label>
            <label>Password
              <input type="password" required value={userForm.password}
                onChange={e => setUserForm(f => ({...f, password:e.target.value}))} />
            </label>
            <label>Role
              <select value={userForm.role}
                onChange={e => setUserForm(f => ({...f, role:e.target.value}))}>
                <option>Admin</option>
                <option>Agent</option>
                <option>Customer Support</option>
                <option>Customer</option>
              </select>
            </label>
            <div className="modal-actions">
              <button type="button" onClick={() => setShowUserModal(false)}>Cancel</button>
              <button className="btn-primary" type="submit">Save</button>
            </div>
          </form>
        </div>
      }
    </div>
  );

  // ---- FINANCE ----
  const renderFinance = () => (
    <div className="finance-section">
      <div className="table-scroll">
        <table className="finance-table">
          <thead>
            <tr>
              <th>Transaction ID</th>
              <th>Passenger</th>
              <th>Amount</th>
              <th>Date</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {financeLoading && <tr><td colSpan={6}>Loading payments...</td></tr>}
            {!financeLoading && payments.length===0 && <tr><td colSpan={6}>No payments found.</td></tr>}
            {payments.map(p => (
              <tr key={p.id}>
                <td>{p.transactionId}</td>
                <td>{p.guest}</td>
                <td>${p.amount}</td>
                <td>{p.date}</td>
                <td><span className={`payment-status ${p.status.toLowerCase()}`}>{p.status}</span></td>
                <td>
                  {p.status === 'Completed' &&
                    <button className="btn-action">Process Refund</button>}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      <form className="report-form">
        <h4>Generate Report</h4>
        <label>Date Range
          <input type="date" value={reportParams.start}
            onChange={e => setReportParams(f => ({ ...f, start:e.target.value}))} />
          -
          <input type="date" value={reportParams.end}
            onChange={e => setReportParams(f => ({ ...f, end:e.target.value}))} />
        </label>
        <label>Payment Gateway
          <select value={reportParams.gateway}
            onChange={e => setReportParams(f => ({ ...f, gateway:e.target.value }))}>
            <option value="">All</option>
            <option>Stripe</option>
            <option>PayPal</option>
          </select>
        </label>
        <label>Route
          <input type="text" value={reportParams.route}
            onChange={e => setReportParams(f => ({ ...f, route:e.target.value }))} placeholder="e.g. JFK-LHR" />
        </label>
        <button className="btn-primary" type="button">Generate</button>
      </form>
    </div>
  );

  // ---- PROMOTIONS ----
  const renderPromotions = () => (
    <div className="promotions-section">
      <h4>Active Promotions & Coupons</h4>
      <div className="promo-list">
        {promotions.length === 0 && <div>No promotions found.</div>}
        {promotions.map(p => (
          <div className="promo-item animate-pop" key={p.id}>
            <div>
              <span className="promo-name">{p.name}</span> <span className="promo-code">{p.code}</span>
            </div>
            <div className="promo-type">{p.type} {p.value}</div>
            <div className="promo-validity">Valid: {p.start} - {p.end}</div>
          </div>
        ))}
      </div>
      <form className="promo-form" onSubmit={handleCreatePromotion}>
        <h4>Create New Promotion</h4>
        <label>Name
          <input type="text" value={promoForm.name} required onChange={e => setPromoForm(f => ({...f,name:e.target.value}))} />
        </label>
        <label>Code
          <input type="text" value={promoForm.code} required onChange={e => setPromoForm(f => ({...f,code:e.target.value}))} />
        </label>
        <label>Type
          <select value={promoForm.type} required onChange={e => setPromoForm(f => ({...f,type:e.target.value}))}>
            <option value="">Select</option>
            <option>% Off</option>
            <option>Flat Amount</option>
          </select>
        </label>
        <label>Value
          <input type="number" value={promoForm.value} required onChange={e => setPromoForm(f => ({...f,value:e.target.value}))}/>
        </label>
        <label>Valid From
          <input type="date" value={promoForm.start} required onChange={e => setPromoForm(f => ({...f,start:e.target.value}))}/>
        </label>
        <label>Valid To
          <input type="date" value={promoForm.end} required onChange={e => setPromoForm(f => ({...f,end:e.target.value}))}/>
        </label>
        <button className="btn-primary" type="submit">Create</button>
      </form>
    </div>
  );

  // ---- MAIN ----
  return (
    <div className="flight-admin-dashboard">
      {renderSidebar()}
      <div className="main-area">
        {renderHeader()}
        <main>
          {activeSection === "Dashboard" && renderDashboard()}
          {activeSection === "Bookings" && renderBookings()}
          {activeSection === "Flights" && renderFlights()}
          {activeSection === "Users" && renderUsers()}
          {activeSection === "Finance" && renderFinance()}
          {activeSection === "Promotions" && renderPromotions()}
        </main>
      </div>
    </div>
  );
}





:root {
  --color-accent: #6366f1;
  --color-negative: #f87171;
  --color-bg: #f6f7fa;
  --color-dark: #262d34;
  --color-light: #fff;
  --color-muted: #7c8593;
  --card-radius: 13px;
  --transition: 0.22s cubic-bezier(.5,.1,.1,1);
}

/* BASE */
.flight-admin-dashboard {
  display: flex;
  min-height: 100vh;
  background: var(--color-bg);
}

/* SIDEBAR */
.flight-sidebar {
  background: var(--color-light);
  border-right: 1px solid #eceffd;
  width: 210px;
  min-width: 155px;
  display: flex;
  flex-direction: column;
  padding: 24px 0 0 0;
}
.sidebar-title {
  display: flex;
  align-items: center;
  font-size: 1.21rem;
  font-weight: bold;
  padding: 0 16px 24px 18px;
}
.sidebar-logo {
  margin-right: 11px;
  color: var(--color-accent);
  font-size: 1.45rem;
}
.sidebar-link {
  background: none;
  border: 0;
  outline: none;
  display: flex;
  align-items: center;
  width: 100%;
  font: inherit;
  font-weight: 500;
  gap: 13px;
  padding: 13px 18px;
  color: var(--color-dark);
  cursor: pointer;
  font-size: 1.08rem;
  border-left: 4px solid transparent;
  transition: var(--transition);
}
.sidebar-link.active,
.sidebar-link:hover {
  background: #eceffd;
  border-left: 4px solid var(--color-accent);
  color: var(--color-accent);
}


/* HEADER */
.flight-main-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 24px 32px 12px 32px;
  background: var(--color-light);
  box-shadow: 0 1px 11px #e2e7f8;
  position: relative;
  z-index: 2;
}
.flight-main-header h1 {
  font-size: 1.34rem;
  font-weight: 700;
}
.notification-bell {
  background: none; position: relative;
  border: none; font-size: 1.39rem;
  color: var(--color-accent); margin-left: 16px;
  cursor: pointer; transition: color var(--transition);
}
.notification-bell:hover { color: var(--color-negative);}
.bell-dot {
  position: absolute; right: -8px; top: -3px;
  background: var(--color-negative); color: #fff;
  border-radius: 50%; width: 16px; height: 16px;
  font-size: 0.92rem; display: flex; align-items: center; justify-content: center;
}
.notifications-dropdown {
  position: absolute; right: 30px; top: 62px;
  background: #fff;
  box-shadow: 0 5px 24px rgba(60,60,60,.14);
  border-radius: 8px;
  width: 310px;
  padding: 18px 16px;
  z-index: 8;
  animation: dropdownFadeIn .27s;
}
@keyframes dropdownFadeIn {
  from { opacity: 0; transform: translateY(-12px);}
  to { opacity: 1; transform: translateY(0);}
}
.notifications-dropdown h4 {margin-bottom: 8px;}
.notifications-dropdown ul {margin:0; padding:0;}
.notifications-dropdown li {
  list-style: none; padding: 8px 0; font-size: 0.96rem;
  border-bottom: 1px solid #f1f2fa;
}

/* MAIN AREA */
.main-area {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
}

/* DASHBOARD METRICS */
.metric-cards {
  display: flex; gap: 25px;
  padding: 30px 36px 10px 36px; margin-bottom: 18px;
}
.metric-card {
  flex: 1;
  background: var(--color-light);
  border-radius: var(--card-radius);
  box-shadow: 0 2px 8px #e3e4ff7a;
  padding: 26px 18px 19px 26px;
  display: flex; flex-direction: column;
  cursor: pointer; /* For scale on hover */
  transition: box-shadow .22s cubic-bezier(.5,.1,.1,1), transform .17s cubic-bezier(.6,0,.6,1);
}
.metric-card:hover {
  box-shadow: 0 8px 20px #dedaff63;
  transform: scale(1.05) translateY(-4px);
  background: #f4f7fd;
}
.metric-label { color: var(--color-muted); font-size: 1rem; margin-bottom: 5px;}
.metric-value { font-size: 2.05rem; font-weight: bold; color: var(--color-accent);}

.dashboard-charts {
  display: flex;
  gap: 40px;
  padding: 0 36px 28px 36px;
  flex-wrap: wrap;
}
.dashboard-charts section {
  background: #fff;
  border-radius: var(--card-radius);
  box-shadow: 0 2px 10px #e2e6f6af;
  flex: 1 1 220px;
  margin-bottom: 17px;
  padding: 22px 19px 18px 18px;
  min-width: 240px;
  transition: box-shadow .18s;
}
.dashboard-charts h3 { margin-top: 0; font-size: 1.11rem; }
.recent-activity ul {padding-left:0;}
.recent-activity li {
  font-size: 0.97rem; list-style: none;
  border-bottom: 1px solid #f2f2fd; padding: 8px 0;
}
.activity-type.booking { color: #6366f1;}
.activity-type.change  { color: #f59e42;}
.activity-type.cancel  { color: #f87171;}

/* BOOKINGS TABLE */
.bookings-section, .users-section, .finance-section, .promotions-section, .flights-section  {
  padding: 28px 36px;
}
.section-controls {
  display: flex; align-items: center;
  gap: 9px; margin-bottom: 17px;
}
.section-controls input,
.section-controls select {
  font-size: 0.99rem;
  padding: 7px 10px; border-radius: 6px; border: 1px solid #eceffd;
  margin-right: 6px;
}
.btn-primary {
  background: var(--color-accent); color: #fff;
  border-radius: 6px; border: none;
  padding: 10px 18px; font-weight: 600;
  font-size: 1.01rem;
  cursor: pointer;
  transition: background var(--transition), box-shadow .12s, transform .12s;
}
.btn-primary:hover { background: #4e51c3; transform: translateY(-2px) scale(1.04);}
.btn-action {
  background: #e6eafe;
  color: var(--color-accent); border-radius: 4px;
  font-size: 0.99rem; border: none; margin-right: 6px; padding: 4px 11px;
  cursor: pointer; transition: background .12s;
}
.btn-action:hover { background: #d1dbfa;}
.ripple { overflow: hidden; position:relative;}
.table-scroll { overflow-x: auto; }
.bookings-table, .users-table, .finance-table, .agents-table {
  width: 100%; border-collapse: collapse; background: #fff;
  border-radius: 9px;
  box-shadow: 0 2px 8px #e3e4ff2c;
}
.bookings-table th, .bookings-table td,
.users-table th, .users-table td,
.finance-table th, .finance-table td,
.agents-table th, .agents-table td
{ padding: 12px 15px; font-size: 0.98rem; }
.bookings-table th, .users-table th, .finance-table th, .agents-table th {
  background: #f2f5ff; color: var(--color-accent);
}
.bookings-table tbody tr:hover, .users-table tbody tr:hover, .finance-table tbody tr:hover, .agents-table tbody tr:hover {
  background: #f5f5fa;
  transition: background var(--transition);
}
.booking-status.confirmed { color: #16a597; font-weight: bold;}
.booking-status.departed { color: #6366f1; font-weight: bold;}
.booking-status.canceled { color: #f87171;}
.payment-status.completed { color: #6366f1; font-weight: bold;}
.payment-status.refunded { color: #f87171;}


/* FLIGHT CARDS */
.flights-section { max-width: 1380px; margin: 0 auto;}
.flight-cards {
  display: flex; flex-wrap: wrap; gap: 23px; margin-top: 4px;
}
.flight-card {
  background: #fff; border-radius: var(--card-radius);
  box-shadow: 0 2px 9px #e0e4f674;
  display: flex; flex-direction: column;
  width: 320px; margin-bottom: 19px;
  transition: transform .17s cubic-bezier(.4,0,.2,1), box-shadow var(--transition);
  padding: 16px 20px;
}
.flight-card:hover {
  transform: translateY(-4px) scale(1.03);
  box-shadow: 0 7px 22px #aeadfd38;
  background: #f3f7fd;
}
.flight-card-header { display: flex; justify-content: space-between; align-items: baseline;}
.card-airline { font-weight: 600; color: var(--color-accent);}
.card-flight-number { font-size: 1.09rem;}
.card-route { font-size: 1.07rem; color: var(--color-dark); margin:4px 0;}
.card-times { font-size: 0.97rem; display: flex; justify-content: space-between;}
.card-seats { font-size: 0.99rem; color: #f59e42; margin: 6px 0;}
.flight-card-actions {margin-top: 6px;}
.flight-card-actions .btn-action { margin-bottom:2px;}
/* Seat Map */
.seat-map-modal { min-width: 320px;}
.seat-map-grid { display: flex; flex-direction: column; gap: 3px; margin: 13px 0;}
.seat-row { display: flex; gap: 3px;}
.seat {
  width: 29px; height: 29px; background: #eceffd;
  border-radius: 5px; border: 1.7px solid #d1dbfb;
  margin: 0 2px; transition: background .13s, box-shadow .13s;
  outline: none;
}
.seat:hover, .seat:focus { background: #6366f1; border-color: #6366f1; box-shadow: 0 0 0 2px #dde7ff;}
.seat.blocked { background: #f87171; border-color: #f87171;}

/* MODAL */
.modal {
  position: fixed; inset: 0;
  background: rgba(60,60,80,.14);
  display: flex; align-items: center; justify-content: center; z-index: 999;
  animation: modalFadeIn .16s cubic-bezier(.4,0,.2,1);
}
@keyframes modalFadeIn { from{opacity:0;} to{opacity:1;}}
.modal-content {
  background: #fff; border-radius: 13px;
  box-shadow: 0 6px 40px #8a8efc44;
  padding: 27px 34px 17px 34px; min-width: 310px; max-width: 97vw;
}
.modal-content h3 { margin-top: 0;}
.modal-content label { display: block; margin-bottom: 12px; font-size: 1.01rem;}
.modal-content input, .modal-content select, .modal-content textarea {
  width:100%; padding: 8px 12px; border-radius: 6px;
  border: 1px solid #e7eaea; margin-top: 3px; margin-bottom: 9px; font-size: 0.97rem;
}
.modal-actions { display: flex; gap: 14px; justify-content: flex-end; margin-top: 8px;}

/* PROMOTIONS */
.promotions-section { max-width: 700px; margin: 0 auto;}
.promo-list { margin: 10px 0 21px 0; display: flex; flex-direction: column; gap: 17px;}
.promo-item {
  border: 1.6px solid #e8eafd; background: #fff;
  border-radius: 7px; padding: 14px 15px; font-size: 1.06rem; display: flex; flex-direction: column; gap: 3px;
  box-shadow: 0 2px 8px #eceafd55; font-weight: 500;
}
.promo-name { font-weight: 700;}
.promo-code { color: var(--color-accent); margin-left: 10px; background: #eceffd; padding: 2px 7px; border-radius: 5px; font-size: 0.95rem;}
.promo-type { font-size: 1.07rem; color: #16a597;}
.promo-validity { font-size: 0.96rem; color: #7b8388;}
.promo-form label { display: block; margin-bottom: 10px;}
.promo-form input, .promo-form select {/*...see modal*/}

/* Animations */
.animate-pop { animation: popIn .33s cubic-bezier(.73,1.5,.29,.98);}
@keyframes popIn {
  from { opacity: 0; transform: scale(.96);}
  to   { opacity: 1; transform: scale(1);}
}
.animate-fade-in { animation: fadeIn .19s;}
@keyframes fadeIn { from{opacity:0;} to{opacity:1;} }
.animate-seat { animation: seatPop .24s cubic-bezier(.86,1.8,.11,.99);}
@keyframes seatPop { from{opacity:0;transform:scale(.7);} to{opacity:1;transform:scale(1);} }

/* Responsive */
@media (max-width: 1100px) {
  .metric-cards, .dashboard-charts, .flight-cards { flex-direction: column; gap: 17px;}
}
@media (max-width:700px) {
  .flight-sidebar {display:none;}
  .main-area {padding-left:0;}
}
@media (max-width:500px) {
  .main-area, .bookings-section, .flights-section, .users-section, .finance-section, .promotions-section { padding: 9px 2vw;}
}








import './SearchResults.css';
import React, { useState, useEffect } from "react";
import { FaCarSide, FaFileInvoiceDollar, FaUsers, FaBell, FaChartBar, FaBuilding, FaClipboardList } from "react-icons/fa";
import { Chart } from "chart.js/auto";
import Calendar from "react-calendar";

const SIDEBAR_MENU = [
  { name: "Dashboard", icon: <FaChartBar /> },
  { name: "Fleet", icon: <FaCarSide /> },
  { name: "Bookings", icon: <FaClipboardList /> },
  { name: "Customers", icon: <FaUsers /> },
  { name: "Finance", icon: <FaFileInvoiceDollar /> },
  { name: "Locations", icon: <FaBuilding /> },
];

const DUMMY_NOTIFICATIONS = [
  { id: 1, text: "New booking: John D. - Tesla Model 3" },
  { id: 2, text: "Vehicle maintenance due: Ford F-150" },
  { id: 3, text: "Payment received: $320 from Lisa M." },
];

export default function CarRentalAdminDashboard() {
  // Sidebar active
  const [activeSection, setActiveSection] = useState("Dashboard");

  // Notifications
  const [showNotifications, setShowNotifications] = useState(false);
  const [notifications, setNotifications] = useState(DUMMY_NOTIFICATIONS);

  // -------- Dashboard Metrics ----------
  const [metrics, setMetrics] = useState({
    totalRevenue: 95000,
    totalRentals: 850,
    availableCars: 45,
    newCustomers: 120,
    monthlyRevenue: [14000, 17000, 19000, 21000, 15000, 20000],
    months: ["Mar", "Apr", "May", "Jun", "Jul", "Aug"],
    popularCarTypes: [
      { type: "SUV", count: 300 },
      { type: "Sedan", count: 280 },
      { type: "Truck", count: 120 },
      { type: "Convertible", count: 100 },
      { type: "Van", count: 50 },
    ],
    recentActivity: [
      { id: 1, type: "Booking", content: "John D. booked Tesla Model 3." },
      { id: 2, type: "Return", content: "Lisa M. returned Ford Escape." },
      { id: 3, type: "Payment", content: "Received $320 from Lisa M." },
    ],
  });

  // Animate metric numbers on dashboard
  const [animatedCounts, setAnimatedCounts] = useState({
    totalRevenue: 0,
    totalRentals: 0,
    availableCars: 0,
    newCustomers: 0,
  });

  useEffect(() => {
    if (activeSection === "Dashboard") {
      let i = 0;
      const steps = 40;
      const intv = setInterval(() => {
        setAnimatedCounts({
          totalRevenue: Math.min(metrics.totalRevenue, Math.floor((i * metrics.totalRevenue) / steps)),
          totalRentals: Math.min(metrics.totalRentals, Math.floor((i * metrics.totalRentals) / steps)),
          availableCars: Math.min(metrics.availableCars, Math.floor((i * metrics.availableCars) / steps)),
          newCustomers: Math.min(metrics.newCustomers, Math.floor((i * metrics.newCustomers) / steps)),
        });
        i++;
        if (i > steps) clearInterval(intv);
      }, 16);
      return () => clearInterval(intv);
    } else {
      setAnimatedCounts({ totalRevenue: 0, totalRentals: 0, availableCars: 0, newCustomers: 0 });
    }
  }, [activeSection, metrics]);

  // ---------- Chart.js Setup for Dashboard ----------

  useEffect(() => {
    if (activeSection === "Dashboard") {
      // Monthly Revenue Bar Chart
      const monthlyId = "monthlyRevenueChart";
      const monthlyCanvas = document.getElementById(monthlyId);
      if (monthlyCanvas && Chart.getChart(monthlyId)) Chart.getChart(monthlyId).destroy();
      if (monthlyCanvas) {
        const ctx = monthlyCanvas.getContext("2d");
        new Chart(ctx, {
          type: "bar",
          data: {
            labels: metrics.months,
            datasets: [
              {
                label: "Monthly Revenue ($)",
                data: metrics.monthlyRevenue,
                backgroundColor: "#4f46e5",
                borderRadius: 6,
              },
            ],
          },
          options: {
            responsive: true,
            plugins: { legend: { display: false } },
            scales: { y: { beginAtZero: true } },
          },
        });
      }

      // Popular Car Types Pie Chart
      const popularId = "popularCarTypesChart";
      const popularCanvas = document.getElementById(popularId);
      if (popularCanvas && Chart.getChart(popularId)) Chart.getChart(popularId).destroy();
      if (popularCanvas) {
        const ctx = popularCanvas.getContext("2d");
        new Chart(ctx, {
          type: "pie",
          data: {
            labels: metrics.popularCarTypes.map((c) => c.type),
            datasets: [
              {
                data: metrics.popularCarTypes.map((c) => c.count),
                backgroundColor: [
                  "#4f46e5",
                  "#3b82f6",
                  "#f59e0b",
                  "#ef4444",
                  "#10b981",
                ],
              },
            ],
          },
          options: {
            plugins: { legend: { position: "bottom" } },
          },
        });
      }
    }
  }, [activeSection, metrics]);

  // -------- Fleet Vehicles --------
  const [vehicles, setVehicles] = useState([]);
  const [vehicleLoading, setVehicleLoading] = useState(true);
  const [showVehicleModal, setShowVehicleModal] = useState(false);
  const [vehicleForm, setVehicleForm] = useState({
    make: "",
    model: "",
    year: "",
    licensePlate: "",
    color: "",
    fuelType: "",
    status: "Available",
    photo: "",
  });
  const [calendarDate, setCalendarDate] = useState(new Date());

  useEffect(() => {
    setVehicleLoading(true);
    fetch("/api/vehicles")
      .then((res) => res.json())
      .then((data) => setVehicles(data))
      .catch((err) => console.error("Error fetching vehicles:", err))
      .finally(() => setVehicleLoading(false));
  }, []);

  // -------- Bookings / Rentals --------
  const [bookings, setBookings] = useState([]);
  const [bookingLoading, setBookingLoading] = useState(true);
  const [bookingFilters, setBookingFilters] = useState({ search: "", date: "", status: "" });
  const [showBookingModal, setShowBookingModal] = useState(false);
  const [newBookingForm, setNewBookingForm] = useState({
    customer: "",
    vehicleId: "",
    startDate: "",
    endDate: "",
  });
  const [checkModalData, setCheckModalData] = useState(null); // For check-in/out modal

  useEffect(() => {
    setBookingLoading(true);
    fetch("/api/bookings")
      .then((res) => res.json())
      .then((data) => setBookings(data))
      .catch((err) => console.error("Error fetching bookings:", err))
      .finally(() => setBookingLoading(false));
  }, []);

  // -------- Customers/User Management --------
  const [customers, setCustomers] = useState([]);
  const [customerLoading, setCustomerLoading] = useState(true);
  const [searchCustomer, setSearchCustomer] = useState("");
  const [showCustomerModal, setShowCustomerModal] = useState(false);
  const [customerForm, setCustomerForm] = useState({
    name: "",
    email: "",
    password: "",
    role: "Customer",
  });
  const [rentalHistoryCustomer, setRentalHistoryCustomer] = useState(null);

  useEffect(() => {
    setCustomerLoading(true);
    fetch("/api/customers")
      .then((res) => res.json())
      .then((data) => setCustomers(data))
      .catch((err) => console.error("Error fetching customers:", err))
      .finally(() => setCustomerLoading(false));
  }, []);

  // -------- Finance & Reports --------
  const [payments, setPayments] = useState([]);
  const [paymentLoading, setPaymentLoading] = useState(true);
  const [reportFilter, setReportFilter] = useState({ start: "", end: "", location: "", vehicleType: "" });

  const [damageReports, setDamageReports] = useState([]);
  useEffect(() => {
    setPaymentLoading(true);
    fetch("/api/payments")
      .then((res) => res.json())
      .then((data) => setPayments(data))
      .catch(console.error)
      .finally(() => setPaymentLoading(false));
    fetch("/api/damage-reports")
      .then((res) => res.json())
      .then((data) => setDamageReports(data))
      .catch(console.error);
  }, []);

  // -------- Promotions --------
  const [promotions, setPromotions] = useState([]);
  useEffect(() => {
    fetch("/api/promotions")
      .then((res) => res.json())
      .then((data) => setPromotions(data))
      .catch(console.error);
  }, []);

  // -------- Locations --------
  const [locations, setLocations] = useState([]);
  useEffect(() => {
    fetch("/api/locations")
      .then((res) => res.json())
      .then((data) => setLocations(data))
      .catch(console.error);
  }, []);

  // ---------- Filtering & Helper Functions ----------

  const filteredBookings = bookings.filter((b) => {
    if (
      bookingFilters.search &&
      !b.customerName.toLowerCase().includes(bookingFilters.search.toLowerCase())
    )
      return false;
    if (bookingFilters.status && b.status !== bookingFilters.status) return false;
    if (bookingFilters.date && !b.rentalPeriod.includes(bookingFilters.date)) return false; // Simplified filtering example
    return true;
  });

  const filteredCustomers = customers.filter((c) =>
    c.name.toLowerCase().includes(searchCustomer.toLowerCase())
  );

  // -------------- Handlers (demo placeholder logic) ------------

  const handleAddVehicle = (e) => {
    e.preventDefault();
    // Example POST fetch for vehicle creation
    fetch("/api/vehicles", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(vehicleForm),
    })
      .then((res) => res.json())
      .then((newVehicle) => setVehicles((prev) => [newVehicle, ...prev]))
      .catch(console.error);
    setShowVehicleModal(false);
  };

  const handleAddBooking = (e) => {
    e.preventDefault();
    fetch("/api/bookings", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(newBookingForm),
    })
      .then((res) => res.json())
      .then((newBooking) => setBookings((prev) => [newBooking, ...prev]))
      .catch(console.error);
    setShowBookingModal(false);
  };

  const handleBookingCheckInOut = (booking, type) => {
    // Open modal to record odometer & damages
    setCheckModalData({ booking, type, odometer: "", damages: "" });
  };

  const handleSubmitCheckInOut = (e) => {
    e.preventDefault();
    // Example PUT to update booking status with odometer and damages
    // ...
    setCheckModalData(null);
  };

  const handleAddCustomer = (e) => {
    e.preventDefault();
    fetch("/api/customers", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(customerForm),
    })
      .then((res) => res.json())
      .then((newCust) => setCustomers((prev) => [newCust, ...prev]))
      .catch(console.error);
    setShowCustomerModal(false);
  };

  // ---------- Render Methods ----------

  const renderSidebar = () => (
    <aside className="sidebar">
      <div className="sidebar-header">
        <FaCarSide className="sidebar-logo" />
        <span>Car Rental Admin</span>
      </div>
      <nav>
        {SIDEBAR_MENU.map((item) => (
          <button
            key={item.name}
            onClick={() => setActiveSection(item.name)}
            className={`sidebar-link ${activeSection === item.name ? "active" : ""}`}
            aria-label={`Go to ${item.name}`}
          >
            {item.icon}
            <span>{item.name}</span>
          </button>
        ))}
      </nav>
    </aside>
  );

  const renderHeader = () => (
    <header className="main-header">
      <h1>{activeSection}</h1>
      <div className="header-right">
        <button
          className="notification-btn"
          aria-label="Toggle notifications"
          onClick={() => setShowNotifications(!showNotifications)}
        >
          <FaBell />
          {notifications.length > 0 && <span className="notification-count">{notifications.length}</span>}
        </button>
        {/* Place for user profile */}
      </div>
      {showNotifications && (
        <div className="notifications-dropdown animate-fadein">
          <h4>Notifications</h4>
          <ul>
            {notifications.length === 0 && <li>No new notifications.</li>}
            {notifications.map((n) => (
              <li key={n.id}>{n.text}</li>
            ))}
          </ul>
        </div>
      )}
    </header>
  );

  const renderDashboard = () => (
    <section className="dashboard">
      <div className="metrics-cards">
        <div className="metric-card animate-pop">
          <span className="metric-label">Total Revenue</span>
          <span className="metric-value">${animatedCounts.totalRevenue.toLocaleString()}</span>
        </div>
        <div className="metric-card animate-pop">
          <span className="metric-label">Total Rentals</span>
          <span className="metric-value">{animatedCounts.totalRentals.toLocaleString()}</span>
        </div>
        <div className="metric-card animate-pop">
          <span className="metric-label">Available Cars</span>
          <span className="metric-value">{animatedCounts.availableCars}</span>
        </div>
        <div className="metric-card animate-pop">
          <span className="metric-label">New Customers</span>
          <span className="metric-value">{animatedCounts.newCustomers}</span>
        </div>
      </div>

      <div className="dashboard-charts">
        <section className="chart-section">
          <h3>Monthly Revenue</h3>
          <canvas id="monthlyRevenueChart" width="280" height="160"></canvas>
        </section>
        <section className="chart-section">
          <h3>Most Popular Car Types</h3>
          <canvas id="popularCarTypesChart" width="280" height="160"></canvas>
        </section>
        <section className="recent-activity">
          <h3>Recent Activity</h3>
          <ul>
            {metrics.recentActivity.map((item) => (
              <li key={item.id}>
                <span className={`activity-type ${item.type.toLowerCase()}`}>{item.type}:</span> {item.content}
              </li>
            ))}
          </ul>
        </section>
      </div>
    </section>
  );

  // --- Fleet ---
  const renderFleet = () => (
    <section className="fleet-section">
      <div className="section-header">
        <h2>Fleet Vehicles</h2>
        <button className="btn-primary ripple" onClick={() => setShowVehicleModal(true)}>
          + Add New Vehicle
        </button>
      </div>
      {vehicleLoading ? (
        <p>Loading vehicles...</p>
      ) : vehicles.length === 0 ? (
        <p>No vehicles found.</p>
      ) : (
        <div className="fleet-cards">
          {vehicles.map((v) => (
            <div key={v.id} className="vehicle-card animate-pop">
              <img
                src={v.photo || "https://via.placeholder.com/160x90?text=No+Image"}
                alt={`${v.make} ${v.model}`}
                className="vehicle-photo"
              />
              <div className="vehicle-info">
                <h4>{v.make} {v.model} ({v.year})</h4>
                <p><strong>License:</strong> {v.licensePlate}</p>
                <p><strong>Status:</strong> <span className={`status ${v.status.toLowerCase().replace(" ", "-")}`}>{v.status}</span></p>
              </div>
              <div className="vehicle-actions">
                <button>Edit</button>
                <button>View Details</button>
                <button>Remove</button>
              </div>
            </div>
          ))}
        </div>
      )}
      <div className="availability-calendar">
        <h3>Availability & Maintenance Calendar</h3>
        <Calendar value={calendarDate} onChange={setCalendarDate} />
      </div>

      {/* Add Vehicle Modal */}
      {showVehicleModal && (
        <div className="modal animate-fadein" role="dialog" aria-modal="true" aria-labelledby="addVehicleTitle">
          <form className="modal-content" onSubmit={handleAddVehicle}>
            <h3 id="addVehicleTitle">Add New Vehicle</h3>
            <label>
              Make
              <input
                required
                type="text"
                value={vehicleForm.make}
                onChange={(e) => setVehicleForm((f) => ({ ...f, make: e.target.value }))}
              />
            </label>
            <label>
              Model
              <input
                required
                type="text"
                value={vehicleForm.model}
                onChange={(e) => setVehicleForm((f) => ({ ...f, model: e.target.value }))}
              />
            </label>
            <label>
              Year
              <input
                required
                type="number"
                value={vehicleForm.year}
                onChange={(e) => setVehicleForm((f) => ({ ...f, year: e.target.value }))}
              />
            </label>
            <label>
              License Plate
              <input
                required
                type="text"
                value={vehicleForm.licensePlate}
                onChange={(e) => setVehicleForm((f) => ({ ...f, licensePlate: e.target.value }))}
              />
            </label>
            <label>
              Color
              <input
                type="text"
                value={vehicleForm.color}
                onChange={(e) => setVehicleForm((f) => ({ ...f, color: e.target.value }))}
              />
            </label>
            <label>
              Fuel Type
              <select
                value={vehicleForm.fuelType}
                onChange={(e) => setVehicleForm((f) => ({ ...f, fuelType: e.target.value }))}
              >
                <option value="">Select</option>
                <option>Gasoline</option>
                <option>Diesel</option>
                <option>Electric</option>
                <option>Hybrid</option>
              </select>
            </label>
            <label>
              Status
              <select
                value={vehicleForm.status}
                onChange={(e) => setVehicleForm((f) => ({ ...f, status: e.target.value }))}
              >
                <option>Available</option>
                <option>On Rent</option>
                <option>Maintenance</option>
              </select>
            </label>
            <label>
              Photo URL
              <input
                type="url"
                value={vehicleForm.photo}
                onChange={(e) => setVehicleForm((f) => ({ ...f, photo: e.target.value }))}
              />
            </label>
            <div className="modal-actions">
              <button type="button" onClick={() => setShowVehicleModal(false)}>Cancel</button>
              <button className="btn-primary" type="submit">Add Vehicle</button>
            </div>
          </form>
        </div>
      )}
    </section>
  );

  // --- Bookings / Rentals Section ---
  const renderBookings = () => (
    <section className="bookings-section">
      <div className="section-header">
        <h2>Rentals & Bookings</h2>
        <button className="btn-primary ripple" onClick={() => setShowBookingModal(true)}>
          + New Booking
        </button>
      </div>

      <div className="filters">
        <input
          type="text"
          aria-label="Search customer name"
          placeholder="Search customer"
          value={bookingFilters.search}
          onChange={(e) => setBookingFilters((f) => ({ ...f, search: e.target.value }))}
        />
        <input
          type="date"
          aria-label="Filter by date"
          value={bookingFilters.date}
          onChange={(e) => setBookingFilters((f) => ({ ...f, date: e.target.value }))}
        />
        <select
          aria-label="Filter by status"
          value={bookingFilters.status}
          onChange={(e) => setBookingFilters((f) => ({ ...f, status: e.target.value }))}
        >
          <option value="">All Statuses</option>
          <option>Confirmed</option>
          <option>Active</option>
          <option>Completed</option>
          <option>Cancelled</option>
        </select>
      </div>

      <div className="table-scroll">
        <table className="bookings-table">
          <thead>
            <tr>
              <th>Customer</th>
              <th>Vehicle</th>
              <th>Rental Period</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {bookingLoading && (
              <tr>
                <td colSpan={5}>Loading...</td>
              </tr>
            )}
            {!bookingLoading && filteredBookings.length === 0 && (
              <tr>
                <td colSpan={5}>No bookings found.</td>
              </tr>
            )}
            {filteredBookings.map((b) => (
              <tr key={b.id}>
                <td>{b.customerName}</td>
                <td>{b.vehicleName}</td>
                <td>{b.rentalPeriod}</td>
                <td>
                  <span className={`status ${b.status.toLowerCase().replace(" ", "-")}`}>{b.status}</span>
                </td>
                <td>
                  <button className="btn-action" onClick={() => alert("Edit booking: " + b.id)}>
                    Edit
                  </button>
                  <button className="btn-action" onClick={() => alert("Cancel booking: " + b.id)}>
                    Cancel
                  </button>
                  {b.status === "Active" && (
                    <>
                      <button className="btn-action" onClick={() => handleBookingCheckInOut(b, "Check-in")}>
                        Check-in
                      </button>
                      <button className="btn-action" onClick={() => handleBookingCheckInOut(b, "Check-out")}>
                        Check-out
                      </button>
                    </>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* New Booking Modal */}
      {showBookingModal && (
        <div className="modal animate-fadein" role="dialog" aria-modal="true" aria-labelledby="newBookingTitle">
          <form className="modal-content" onSubmit={handleAddBooking}>
            <h3 id="newBookingTitle">New Booking</h3>
            <label>
              Customer Name
              <input
                required
                type="text"
                value={newBookingForm.customer}
                onChange={(e) => setNewBookingForm((f) => ({ ...f, customer: e.target.value }))}
              />
            </label>
            <label>
              Vehicle
              <select
                required
                value={newBookingForm.vehicleId}
                onChange={(e) => setNewBookingForm((f) => ({ ...f, vehicleId: e.target.value }))}
              >
                <option value="">Select Vehicle</option>
                {vehicles.map((v) => (
                  <option key={v.id} value={v.id}>
                    {v.make} {v.model} ({v.licensePlate})
                  </option>
                ))}
              </select>
            </label>
            <label>
              Rental Start Date
              <input
                required
                type="date"
                value={newBookingForm.startDate}
                onChange={(e) => setNewBookingForm((f) => ({ ...f, startDate: e.target.value }))}
              />
            </label>
            <label>
              Rental End Date
              <input
                required
                type="date"
                value={newBookingForm.endDate}
                onChange={(e) => setNewBookingForm((f) => ({ ...f, endDate: e.target.value }))}
              />
            </label>
            <div className="modal-actions">
              <button type="button" onClick={() => setShowBookingModal(false)}>
                Cancel
              </button>
              <button className="btn-primary" type="submit">
                Book
              </button>
            </div>
          </form>
        </div>
      )}

      {/* Check-in/out modal */}
      {checkModalData && (
        <div className="modal animate-fadein" role="dialog" aria-modal="true" aria-labelledby="checkInOutTitle">
          <form className="modal-content" onSubmit={handleSubmitCheckInOut}>
            <h3 id="checkInOutTitle">{checkModalData.type} - {checkModalData.booking.vehicleName}</h3>
            <p>
              Customer: <strong>{checkModalData.booking.customerName}</strong>
            </p>
            <label>
              Odometer Reading
              <input
                type="number"
                required
                value={checkModalData.odometer}
                onChange={(e) => setCheckModalData({ ...checkModalData, odometer: e.target.value })}
              />
            </label>
            <label>
              Report New Damages
              <textarea
                rows="3"
                value={checkModalData.damages}
                onChange={(e) => setCheckModalData({ ...checkModalData, damages: e.target.value })}
                placeholder="Describe any damages noticed..."
              />
            </label>
            <div className="modal-actions">
              <button type="button" onClick={() => setCheckModalData(null)}>
                Cancel
              </button>
              <button className="btn-primary" type="submit">
                Submit
              </button>
            </div>
          </form>
        </div>
      )}
    </section>
  );

  // --- Customers ---
  const renderCustomers = () => (
    <section className="customers-section">
      <div className="section-header">
        <h2>Customers & Staff</h2>
        <button className="btn-primary ripple" onClick={() => setShowCustomerModal(true)}>
          + Add New User
        </button>
      </div>

      <input
        type="search"
        placeholder="Search customers/staff"
        aria-label="Search users"
        value={searchCustomer}
        onChange={(e) => setSearchCustomer(e.target.value)}
        className="search-input"
      />

      <div className="table-scroll">
        {customerLoading ? (
          <p>Loading users...</p>
        ) : (
          <table className="users-table" aria-label="Users table">
            <thead>
              <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Role</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {filteredCustomers.length === 0 ? (
                <tr>
                  <td colSpan="4">No users found.</td>
                </tr>
              ) : (
                filteredCustomers.map((c) => (
                  <tr key={c.id}>
                    <td>
                      <button
                        type="button"
                        className="link-button"
                        onClick={() => setRentalHistoryCustomer(c)}
                        aria-label={`View rental history of ${c.name}`}
                      >
                        {c.name}
                      </button>
                    </td>
                    <td>{c.email}</td>
                    <td>{c.role}</td>
                    <td>
                      <button className="btn-action">Edit</button>
                      <button className="btn-action">Delete</button>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        )}
      </div>

      {/* Add new user modal */}
      {showCustomerModal && (
        <div className="modal animate-fadein" role="dialog" aria-modal="true" aria-labelledby="addCustomerTitle">
          <form className="modal-content" onSubmit={handleAddCustomer}>
            <h3 id="addCustomerTitle">Add New User</h3>
            <label>
              Name
              <input
                required
                type="text"
                value={customerForm.name}
                onChange={(e) => setCustomerForm((f) => ({ ...f, name: e.target.value }))}
              />
            </label>
            <label>
              Email
              <input
                required
                type="email"
                value={customerForm.email}
                onChange={(e) => setCustomerForm((f) => ({ ...f, email: e.target.value }))}
              />
            </label>
            <label>
              Password
              <input
                required
                type="password"
                value={customerForm.password}
                onChange={(e) => setCustomerForm((f) => ({ ...f, password: e.target.value }))}
              />
            </label>
            <label>
              Role
              <select
                value={customerForm.role}
                onChange={(e) => setCustomerForm((f) => ({ ...f, role: e.target.value }))}
              >
                <option>Customer</option>
                <option>Staff</option>
                <option>Admin</option>
              </select>
            </label>
            <div className="modal-actions">
              <button type="button" onClick={() => setShowCustomerModal(false)}>
                Cancel
              </button>
              <button className="btn-primary" type="submit">
                Save
              </button>
            </div>
          </form>
        </div>
      )}

      {/* Rental history modal */}
      {rentalHistoryCustomer && (
        <div className="modal animate-fadein" role="dialog" aria-modal="true" aria-labelledby="rentalHistoryTitle">
          <div className="modal-content">
            <h3 id="rentalHistoryTitle">{rentalHistoryCustomer.name}'s Rental & Payment History</h3>
            {/* For simplicity, just listing dummy data here, ideally make another fetch by customer id*/}
            <ul className="rental-history-list">
              <li>2023-07-01 to 2023-07-10: Tesla Model 3 - Paid $500</li>
              <li>2023-03-15 to 2023-03-20: Ford Escape - Paid $300</li>
              {/* Add dynamic data as needed */}
            </ul>
            <div className="modal-actions">
              <button onClick={() => setRentalHistoryCustomer(null)}>Close</button>
            </div>
          </div>
        </div>
      )}
    </section>
  );

  // --- Finance & Reports ---
  const renderFinance = () => (
    <section className="finance-section">
      <h2>Payments & Reports</h2>

      <div className="table-scroll">
        <table className="payments-table">
          <thead>
            <tr>
              <th>Transaction ID</th>
              <th>Customer</th>
              <th>Amount</th>
              <th>Date</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {paymentLoading && (
              <tr>
                <td colSpan={6}>Loading payments...</td>
              </tr>
            )}
            {!paymentLoading && payments.length === 0 && (
              <tr>
                <td colSpan={6}>No payments found.</td>
              </tr>
            )}
            {payments.map((p) => (
              <tr key={p.id}>
                <td>{p.transactionId}</td>
                <td>{p.customerName}</td>
                <td>${p.amount}</td>
                <td>{p.date}</td>
                <td>
                  <span className={`status ${p.status.toLowerCase()}`}>{p.status}</span>
                </td>
                <td>
                  {p.status === "Completed" && <button className="btn-action">Process Refund</button>}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      <form className="report-form" onSubmit={(e) => e.preventDefault()}>
        <h3>Generate Financial Report</h3>
        <label>
          Date Range:
          <input
            type="date"
            value={reportFilter.start}
            onChange={(e) => setReportFilter((f) => ({ ...f, start: e.target.value }))}
          />{" "}
          -{" "}
          <input
            type="date"
            value={reportFilter.end}
            onChange={(e) => setReportFilter((f) => ({ ...f, end: e.target.value }))}
          />
        </label>
        <label>
          Location:
          <input
            type="text"
            value={reportFilter.location}
            placeholder="e.g. Downtown"
            onChange={(e) => setReportFilter((f) => ({ ...f, location: e.target.value }))}
          />
        </label>
        <label>
          Vehicle Type:
          <input
            type="text"
            value={reportFilter.vehicleType}
            placeholder="e.g. Sedan"
            onChange={(e) => setReportFilter((f) => ({ ...f, vehicleType: e.target.value }))}
          />
        </label>
        <button className="btn-primary" type="submit">
          Generate
        </button>
      </form>

      <section className="damage-reports">
        <h3>Damage and Incident Reports</h3>
        {damageReports.length === 0 ? (
          <p>No damage reports.</p>
        ) : (
          <ul>
            {damageReports.map((d) => (
              <li key={d.id}>
                <strong>{d.vehicle}</strong> - Reported by {d.customer} on {d.date}: {d.details}
              </li>
            ))}
          </ul>
        )}
      </section>
    </section>
  );

  // --- Locations ---
  const renderLocations = () => (
    <section className="locations-section">
      <h2>Rental Locations</h2>
      {locations.length === 0 ? (
        <p>No locations available.</p>
      ) : (
        <div className="table-scroll">
          <table className="locations-table">
            <thead>
              <tr>
                <th>Name</th>
                <th>Address</th>
                <th>Working Hours</th>
              </tr>
            </thead>
            <tbody>
              {locations.map((loc) => (
                <tr key={loc.id}>
                  <td>{loc.name}</td>
                  <td>{loc.address}</td>
                  <td>{loc.hours}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </section>
  );

  // ------- MAIN RETURN -----
  return (
    <div className="car-rental-admin-dashboard">
      {renderSidebar()}
      <div className="main-content">
        {renderHeader()}
        <main>
          {activeSection === "Dashboard" && renderDashboard()}
          {activeSection === "Fleet" && renderFleet()}
          {activeSection === "Bookings" && renderBookings()}
          {activeSection === "Customers" && renderCustomers()}
          {activeSection === "Finance" && renderFinance()}
          {activeSection === "Locations" && renderLocations()}
        </main>
      </div>
    </div>
  );
}





:root {
  --primary-color: #4f46e5;
  --danger-color: #ef4444;
  --success-color: #10b981;
  --bg-color: #f8fafc;
  --text-color: #1f2937;
  --muted-color: #6b7280;
  --card-radius: 12px;
  --transition-duration: 0.22s;
}

/* General */

body,
html,
.car-rental-admin-dashboard {
  margin: 0;
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  height: 100%;
  background-color: var(--bg-color);
  color: var(--text-color);
  display: flex;
  min-height: 100vh;
}

/* Sidebar */

.sidebar {
  width: 220px;
  background-color: white;
  border-right: 1px solid #e5e7eb;
  display: flex;
  flex-direction: column;
  padding: 24px 0;
  box-sizing: border-box;
}

.sidebar-header {
  display: flex;
  align-items: center;
  font-size: 1.3rem;
  font-weight: 700;
  padding: 0 24px 24px 24px;
  color: var(--primary-color);
}

.sidebar-logo {
  font-size: 1.9rem;
  margin-right: 12px;
}

.sidebar nav {
  display: flex;
  flex-direction: column;
  gap: 12px;
  padding: 0 8px;
}

.sidebar-link {
  background: none;
  border: none;
  outline: none;
  color: var(--text-color);
  font-size: 1rem;
  text-align: left;
  font-weight: 600;
  cursor: pointer;
  padding: 12px 16px;
  display: flex;
  align-items: center;
  gap: 12px;
  border-left: 4px solid transparent;
  transition: background-color var(--transition-duration) ease,
    border-color var(--transition-duration) ease;
  user-select: none;
}

.sidebar-link svg {
  font-size: 1.3rem;
  color: var(--primary-color);
  flex-shrink: 0;
}

.sidebar-link:hover,
.sidebar-link.active {
  background-color: #ede9fe;
  border-left-color: var(--primary-color);
  color: var(--primary-color);
}

/* Main content */

.main-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  background: var(--bg-color);
  min-height: 100vh;
}

/* Header */

.main-header {
  height: 64px;
  background: white;
  box-shadow: 0 1px 6px #dedaf8;
  padding: 0 28px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  user-select: none;
  position: relative;
  z-index: 5;
}

.main-header h1 {
  font-weight: 700;
  font-size: 1.4rem;
  color: var(--primary-color);
}

.header-right {
  position: relative;
}

.notification-btn {
  position: relative;
  border: none;
  background: none;
  font-size: 1.5rem;
  cursor: pointer;
  color: var(--primary-color);
  transition: color var(--transition-duration);
  padding: 6px;
}

.notification-btn:hover {
  color: var(--danger-color);
}

.notification-count {
  position: absolute;
  top: 4px;
  right: 4px;
  background: var(--danger-color);
  color: white;
  border-radius: 50%;
  font-size: 0.75rem;
  width: 18px;
  height: 18px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.notifications-dropdown {
  position: absolute;
  top: 48px;
  right: 0;
  width: 320px;
  background: white;
  border-radius: var(--card-radius);
  box-shadow: 0 6px 18px rgba(0, 0, 0, 0.08);
  padding: 16px;
  z-index: 999;
  max-height: 300px;
  overflow-y: auto;
}

.notifications-dropdown h4 {
  margin: 0 0 8px 0;
  font-weight: 700;
  color: var(--primary-color);
}

.notifications-dropdown ul {
  list-style: none;
  margin: 0;
  padding: 0;
}

.notifications-dropdown li {
  margin-bottom: 10px;
  padding-bottom: 6px;
  border-bottom: 1px solid #e5e7eb;
  font-size: 0.95rem;
  color: var(--text-color);
}

.notifications-dropdown li:last-child {
  border-bottom: none;
  margin-bottom: 0;
}

/* Animations */

@keyframes popIn {
  from {
    opacity: 0;
    transform: scale(0.96);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

.animate-pop {
  animation-name: popIn;
  animation-duration: 0.3s;
  animation-timing-function: cubic-bezier(0.3, 1, 0.4, 1);
}

.animate-fadein {
  animation-name: fadeIn;
  animation-duration: 0.2s;
  animation-timing-function: ease-out;
}

/* Dashboard */

.dashboard {
  padding: 24px 36px 50px 36px;
  flex-grow: 1;
  overflow-y: auto;
}

.metrics-cards {
  display: flex;
  gap: 20px;
  margin-bottom: 32px;
  flex-wrap: wrap;
}

.metric-card {
  background: white;
  flex: 1 1 220px;
  border-radius: var(--card-radius);
  padding: 20px 24px;
  box-shadow: 0 2px 10px rgb(157 149 246 / 0.12);
  cursor: default;
  user-select: none;
  transition: transform var(--transition-duration), box-shadow var(--transition-duration);
}

.metric-card:hover {
  box-shadow: 0 10px 22px rgb(157 149 246 / 0.25);
  transform: translateY(-6px);
}

.metric-label {
  font-size: 1.05rem;
  color: var(--muted-color);
  margin-bottom: 6px;
  font-weight: 600;
}

.metric-value {
  font-size: 2.4rem;
  font-weight: 700;
  color: var(--primary-color);
  user-select: text;
}

/* Dashboard charts */

.dashboard-charts {
  display: flex;
  flex-wrap: wrap;
  gap: 32px;
}

.chart-section {
  background: white;
  border-radius: var(--card-radius);
  box-shadow: 0 2px 10px rgb(157 149 246 / 0.12);
  padding: 16px 24px;
  flex-grow: 1;
  flex-basis: 300px;
}

.chart-section h3 {
  margin-top: 0;
  font-size: 1.1rem;
  font-weight: 700;
  color: var(--primary-color);
}

/* Recent activity */

.recent-activity {
  background: white;
  border-radius: var(--card-radius);
  box-shadow: 0 2px 10px rgb(157 149 246 / 0.12);
  padding: 16px 24px;
  margin-top: 20px;
  flex-grow: 0.6;
  min-width: 320px;
}

.recent-activity h3 {
  font-weight: 700;
  font-size: 1.15rem;
  color: var(--primary-color);
  margin-top: 0;
}

.recent-activity ul {
  list-style: none;
  padding-left: 0;
  margin-top: 12px;
  max-height: 250px;
  overflow-y: auto;
}

.recent-activity li {
  padding: 6px 0;
  font-size: 0.95rem;
  border-bottom: 1px solid #e5e7eb;
  color: var(--text-color);
}

.activity-type.booking {
  color: var(--primary-color);
  font-weight: 700;
  margin-right: 4px;
}

.activity-type.return {
  color: var(--success-color);
  font-weight: 700;
  margin-right: 4px;
}

.activity-type.payment {
  color: #f59e0b;
  font-weight: 700;
  margin-right: 4px;
}

/* Fleet Section */

.fleet-section {
  padding: 24px 36px;
  overflow-y: auto;
  flex-grow: 1;
}

.section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.fleet-cards {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
}

.vehicle-card {
  width: 280px;
  background-color: white;
  border-radius: var(--card-radius);
  box-shadow: 0 2px 10px rgb(157 149 246 / 0.12);
  overflow: hidden;
  display: flex;
  flex-direction: column;
  user-select: none;
  transition: box-shadow var(--transition-duration), transform var(--transition-duration);
  cursor: default;
}

.vehicle-card:hover {
  box-shadow: 0 12px 30px rgb(157 149 246 / 0.28);
  transform: translateY(-6px);
}

.vehicle-photo {
  width: 100%;
  height: 140px;
  object-fit: cover;
  border-bottom: 1px solid #d1d5db;
}

.vehicle-info {
  padding: 14px 16px;
  flex-grow: 1;
}

.vehicle-info h4 {
  margin: 0 0 6px 0;
  font-weight: 700;
  color: var(--primary-color);
  font-size: 1.1rem;
}

.vehicle-info p {
  margin: 4px 0;
  font-size: 0.9rem;
  color: var(--text-color);
}

.status {
  font-weight: 700;
  padding: 2px 6px;
  border-radius: 8px;
  font-size: 0.85rem;
  text-transform: capitalize;
  user-select: text;
}

.status.available {
  background-color: #d1fae5;
  color: var(--success-color);
}

.status["on-rent"],
.status["on-rent"] {
  background-color: #dbeafe;
  color: #2563eb;
}

.status.maintenance {
  background-color: #fee2e2;
  color: var(--danger-color);
}

.vehicle-actions {
  padding: 12px 16px;
  border-top: 1px solid #e5e7eb;
  display: flex;
  justify-content: space-between;
}

.vehicle-actions button {
  background: transparent;
  border: none;
  color: var(--primary-color);
  font-weight: 600;
  cursor: pointer;
  transition: color var(--transition-duration);
  font-size: 0.9rem;
}

.vehicle-actions button:hover {
  color: #4338ca;
}

/* Availability calendar */

.availability-calendar {
  margin-top: 36px;
  background-color: white;
  padding: 20px;
  border-radius: var(--card-radius);
  box-shadow: 0 2px 10px rgb(157 149 246 / 0.12);
  max-width: 360px;
}

.availability-calendar h3 {
  margin-top: 0;
  color: var(--primary-color);
  font-weight: 700;
  font-size: 1.1rem;
}

/* Bookings Section */

.bookings-section {
  padding: 24px 36px;
  overflow-y: auto;
  flex-grow: 1;
}

.filters {
  display: flex;
  gap: 14px;
  margin-bottom: 16px;
  flex-wrap: wrap;
}

.filters input,
.filters select {
  padding: 8px 12px;
  border: 1px solid #d1d5db;
  border-radius: 8px;
  font-size: 1rem;
  width: 200px;
  max-width: 100%;
}

.section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 12px;
  flex-wrap: wrap;
}

.bookings-table {
  width: 100%;
  border-collapse: collapse;
  background: white;
  border-radius: var(--card-radius);
  box-shadow: 0 2px 14px rgb(157 149 246 / 0.12);
  overflow: hidden;
}

.bookings-table th,
.bookings-table td {
  padding: 14px 18px;
  font-size: 0.95rem;
  text-align: left;
}

.bookings-table th {
  background-color: #ede9fe;
  color: var(--primary-color);
  font-weight: 600;
}

.bookings-table tbody tr:hover {
  background-color: #f4f4ff;
}

.status {
  font-weight: 700;
  text-transform: capitalize;
  border-radius: 8px;
  padding: 4px 8px;
  font-size: 0.85rem;
  user-select: text;
}

.status.confirmed {
  background-color: #dbeafe;
  color: #2563eb;
}

.status.active {
  background-color: #34d399;
  color: white;
}

.status.completed {
  background-color: #a7f3d0;
  color: #065f46;
}

.status.cancelled {
  background-color: #fee2e2;
  color: var(--danger-color);
}

.btn-action {
  background-color: transparent;
  border: none;
  color: var(--primary-color);
  cursor: pointer;
  font-weight: 600;
  margin-right: 10px;
  transition: color var(--transition-duration);
  font-size: 0.9rem;
}

.btn-action:hover {
  color: #4338ca;
}

.btn-primary {
  background-color: var(--primary-color);
  color: white;
  cursor: pointer;
  border: none;
  border-radius: 8px;
  padding: 10px 18px;
  font-weight: 700;
  font-size: 1rem;
  user-select: none;
  transition: background-color var(--transition-duration), transform var(--transition-duration);
}

.btn-primary:hover {
  background-color: #4338ca;
  transform: translateY(-2px) scale(1.04);
}

.ripple {
  position: relative;
  overflow: hidden;
}

.table-scroll {
  overflow-x: auto;
}

/* Customer Section */

.customers-section {
  padding: 24px 36px;
  overflow-y: auto;
  flex-grow: 1;
}

.users-table {
  width: 100%;
  border-collapse: collapse;
  background: white;
  border-radius: var(--card-radius);
  box-shadow: 0 2px 14px rgb(157 149 246 / 0.12);
  overflow: hidden;
}

.users-table th,
.users-table td {
  padding: 14px 18px;
  font-size: 0.95rem;
  text-align: left;
}

.users-table th {
  background-color: #ede9fe;
  color: var(--primary-color);
  font-weight: 600;
}

.link-button {
  background: none;
  border: none;
  color: var(--primary-color);
  cursor: pointer;
  text-decoration: underline;
  font-weight: 600;
  font-size: 1rem;
  padding: 0;
}

.link-button:hover {
  color: #4338ca;
}

.search-input {
  width: 300px;
  padding: 9px 12px;
  border-radius: 8px;
  border: 1px solid #d1d5db;
  margin-bottom: 14px;
  font-size: 1rem;
}

.rental-history-list {
  list-style: none;
  margin: 12px 0;
  padding: 0;
  font-size: 0.95rem;
}

/* Modals */

.modal {
  position: fixed;
  inset: 0;
  background-color: rgba(0, 0, 0, 0.18);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 9999;
}

.modal-content {
  background-color: white;
  border-radius: var(--card-radius);
  padding: 28px 32px;
  width: 400px;
  max-width: 95vw;
  max-height: 90vh;
  overflow-y: auto;
  box-sizing: border-box;
  outline: none;
}

.modal-content h3 {
  margin-top: 0;
  margin-bottom: 24px;
  color: var(--primary-color);
  font-weight: 700;
}

.modal-content label {
  display: block;
  margin-bottom: 14px;
  font-weight: 600;
}

.modal-content input[type="text"],
.modal-content input[type="email"],
.modal-content input[type="password"],
.modal-content input[type="date"],
.modal-content input[type="number"],
.modal-content input[type="url"],
.modal-content select,
.modal-content textarea {
  width: 100%;
  padding: 8px 12px;
  border-radius: 6px;
  border: 1px solid #d1d5db;
  box-sizing: border-box;
  font-size: 1rem;
  font-family: inherit;
}

.modal-content textarea {
  resize: vertical;
}

.modal-actions {
  display: flex;
  justify-content: flex-end;
  gap: 16px;
  margin-top: 20px;
}

.modal-actions button {
  cursor: pointer;
  font-weight: 600;
  padding: 10px 18px;
  border-radius: 8px;
  border: none;
  font-size: 1rem;
  transition: background-color var(--transition-duration);
}

.modal-actions button:first-child {
  background-color: transparent;
  color: var(--danger-color);
}

.modal-actions button:first-child:hover {
  background-color: #fee2e2;
}

.modal-actions .btn-primary {
  background-color: var(--primary-color);
  color: white;
}

.modal-actions .btn-primary:hover {
  background-color: #4338ca;
}

/* Finance & Reports */

.finance-section,
.locations-section {
  padding: 24px 36px;
  overflow-y: auto;
  flex-grow: 1;
}

.payments-table,
.locations-table {
  width: 100%;
  border-collapse: collapse;
  background: white;
  border-radius: var(--card-radius);
  box-shadow: 0 2px 14px rgb(157 149 246 / 0.12);
  overflow: hidden;
  margin-bottom: 24px;
}

.payments-table th,
.payments-table td,
.locations-table th,
.locations-table td {
  padding: 14px 18px;
  font-size: 0.95rem;
  text-align: left;
}

.payments-table th,
.locations-table th {
  background-color: #ede9fe;
  color: var(--primary-color);
  font-weight: 600;
}

.payments-table tbody tr:hover,
.locations-table tbody tr:hover {
  background-color: #f4f4ff;
}

.report-form {
  max-width: 480px;
  background: white;
  padding: 20px 24px;
  border-radius: var(--card-radius);
  box-shadow: 0 2px 10px rgb(157 149 246 / 0.12);
}

.report-form h3 {
  margin-top: 0;
  margin-bottom: 16px;
  color: var(--primary-color);
  font-weight: 700;
}

.report-form label {
  display: block;
  margin-bottom: 10px;
  font-weight: 600;
}

.report-form input,
.report-form select {
  width: 100%;
  padding: 8px 12px;
  border-radius: 6px;
  border: 1px solid #d1d5db;
  box-sizing: border-box;
  font-size: 1rem;
  font-family: inherit;
  margin-top: 4px;
  margin-bottom: 14px;
}

.report-form button {
  background-color: var(--primary-color);
  color: white;
  cursor: pointer;
  border: none;
  border-radius: 8px;
  padding: 10px 18px;
  font-weight: 700;
  font-size: 1rem;
  user-select: none;
  transition: background-color var(--transition-duration);
}

.report-form button:hover {
  background-color: #4338ca;
}

/* Damage Reports */

.damage-reports ul {
  list-style: none;
  padding-left: 0;
  margin-top: 10px;
  max-height: 200px;
  overflow-y: auto;
}

.damage-reports li {
  border-bottom: 1px solid #e5e7eb;
  padding: 8px 0;
  font-size: 0.95rem;
  color: var(--text-color);
}

/* Locations Section */

.locations-table {
  margin-top: 12px;
  margin-bottom: 40px;
}

/* Responsive */

@media (max-width: 1000px) {
  .metrics-cards {
    flex-direction: column;
  }
  .dashboard-charts {
    flex-direction: column;
  }
  .fleet-cards {
    justify-content: center;
  }
}

@media (max-width: 700px) {
  .sidebar {
    display: none;
  }
  .main-content {
    padding: 12px 8px;
  }
  .filters {
    flex-direction: column;
  }
  .filters input,
  .filters select {
    width: 100%;
    max-width: none;
  }
}







import './SearchResults.css';
import React, { useState, useEffect, useRef } from "react";
import {
  FaPlane,
  FaHotel,
  FaCar,
  FaChartBar,
  FaSlidersH,
  FaBell,
  FaUsersCog,
  FaSearch,
} from "react-icons/fa";
import { Chart } from "chart.js/auto";

const SIDEBAR_MENU = [
  { name: "Flights", icon: <FaPlane />, href: "/admin/flights" },
  { name: "Hotels", icon: <FaHotel />, href: "/admin/hotels" },
  { name: "Cars", icon: <FaCar />, href: "/admin/cars" },
  { name: "Analytics", icon: <FaChartBar />, href: "/admin/analytics" },
  { name: "Settings", icon: <FaSlidersH />, href: "/admin/settings" },
];

export default function TravelAdminHomepage() {
  const [activeSidebar, setActiveSidebar] = useState(null);
  const [summaryData, setSummaryData] = useState(null);
  const [activityFeed, setActivityFeed] = useState([]);
  const [alerts, setAlerts] = useState([]);
  const [liveWidgetData, setLiveWidgetData] = useState(null);
  const [chartData, setChartData] = useState(null);
  const [notifications, setNotifications] = useState([]);
  const [showNotifications, setShowNotifications] = useState(false);
  const [searchText, setSearchText] = useState("");
  const [searchPlaceholder, setSearchPlaceholder] = useState(
    "Search bookings, users, flights, hotels, vehicles..."
  );
  const bellRef = useRef(null);

  // Animations - bell shake on new notifications
  useEffect(() => {
    if (notifications.length > 0) {
      bellRef.current?.classList.add("bell-ring");
      const timeout = setTimeout(() => {
        bellRef.current?.classList.remove("bell-ring");
      }, 1500);
      return () => clearTimeout(timeout);
    }
  }, [notifications]);

  // Fetch consolidated dashboard data on mount
  useEffect(() => {
    // Summary KPIs
    fetch("/api/dashboard/summary")
      .then((res) => res.json())
      .then(setSummaryData)
      .catch((e) => console.error("Failed to fetch summary:", e));

    // Recent activity feed
    fetch("/api/dashboard/activity")
      .then((res) => res.json())
      .then(setActivityFeed)
      .catch((e) => console.error("Failed to fetch activity feed:", e));

    // Alerts / pending actions
    fetch("/api/dashboard/alerts")
      .then((res) => res.json())
      .then(setAlerts)
      .catch((e) => console.error("Failed to fetch alerts:", e));

    // Live widget data for each service
    fetch("/api/dashboard/live-widgets")
      .then((res) => res.json())
      .then(setLiveWidgetData)
      .catch((e) => console.error("Failed to fetch live widgets:", e));

    // Chart data: line (daily revenue), pie (bookings by type), bar (top destinations)
    fetch("/api/dashboard/charts")
      .then((res) => res.json())
      .then(setChartData)
      .catch((e) => console.error("Failed to fetch chart data:", e));

    // Notifications
    fetch("/api/notifications")
      .then((res) => res.json())
      .then(setNotifications)
      .catch((e) => console.error("Failed to fetch notifications:", e));
  }, []);

  // Handle charts rendering via Chart.js
  useEffect(() => {
    if (!chartData) return;

    // Line chart: Daily Revenue by Service
    const lineCanvas = document.getElementById("dailyRevenueChart");
    if (lineCanvas) {
      if (Chart.getChart(lineCanvas)) Chart.getChart(lineCanvas).destroy();
      const ctx = lineCanvas.getContext("2d");

      new Chart(ctx, {
        type: "line",
        data: {
          labels: chartData.dailyRevenue.labels,
          datasets: chartData.dailyRevenue.datasets.map((ds) => ({
            label: ds.label,
            data: ds.data,
            borderColor: ds.color,
            backgroundColor: ds.color + "33",
            fill: true,
            tension: 0.3,
          })),
        },
        options: {
          responsive: true,
          plugins: {
            legend: { position: "top" },
            tooltip: { mode: "index", intersect: false },
          },
          scales: {
            y: { beginAtZero: true, ticks: { callback: (val) => "$" + val.toLocaleString() } },
          },
        },
      });
    }

    // Pie chart: Bookings by Service Type
    const pieCanvas = document.getElementById("bookingsByServiceChart");
    if (pieCanvas) {
      if (Chart.getChart(pieCanvas)) Chart.getChart(pieCanvas).destroy();
      const ctx = pieCanvas.getContext("2d");

      new Chart(ctx, {
        type: "pie",
        data: {
          labels: chartData.bookingsByService.labels,
          datasets: [
            {
              data: chartData.bookingsByService.data,
              backgroundColor: ["#4f46e5", "#059669", "#d946ef"],
            },
          ],
        },
        options: {
          plugins: {
            legend: { position: "bottom" },
          },
          responsive: true,
        },
      });
    }

    // Bar chart: Bookings by Top 5 Destinations
    const barCanvas = document.getElementById("bookingsByDestChart");
    if (barCanvas) {
      if (Chart.getChart(barCanvas)) Chart.getChart(barCanvas).destroy();
      const ctx = barCanvas.getContext("2d");

      new Chart(ctx, {
        type: "bar",
        data: {
          labels: chartData.bookingsByDest.labels,
          datasets: [
            {
              label: "Bookings",
              data: chartData.bookingsByDest.data,
              backgroundColor: "#2563eb",
              borderRadius: 6,
            },
          ],
        },
        options: {
          responsive: true,
          plugins: {
            legend: { display: false },
            tooltip: { enabled: true },
          },
          scales: {
            y: {
              beginAtZero: true,
              ticks: { precision: 0 },
            },
          },
        },
      });
    }
  }, [chartData]);

  // Unified search handler (example)
  const handleSearchSubmit = (e) => {
    e.preventDefault();
    alert(`Searching for "${searchText}" across all services...`);
    setSearchText("");
  };

  // Render Sidebar with service links and shortcut buttons
  const renderSidebar = () => (
    <aside className="sidebar" aria-label="Primary Navigation">
      <header className="sidebar-header">
        <h2>Travel Admin</h2>
      </header>
      <nav>
        {SIDEBAR_MENU.map((item) => (
          <a
            key={item.name}
            href={item.href}
            className="sidebar-link"
            onClick={() => setActiveSidebar(item.name)}
            aria-current={activeSidebar === item.name ? "page" : undefined}
          >
            <span className="sidebar-icon" aria-hidden="true">
              {item.icon}
            </span>
            <span>{item.name}</span>
          </a>
        ))}
      </nav>
      <div className="sidebar-shortcuts" aria-label="Quick Management Shortcuts">
        <a href="/admin/flights" className="shortcut-btn">
          Manage Flights
        </a>
        <a href="/admin/hotels" className="shortcut-btn">
          Manage Hotels
        </a>
        <a href="/admin/cars" className="shortcut-btn">
          Manage Cars
        </a>
      </div>
    </aside>
  );

  // Render header with search and notifications
  const renderHeader = () => (
    <header className="main-header">
      <form className="search-form" role="search" onSubmit={handleSearchSubmit} aria-label="Unified search for admin">
        <label htmlFor="adminSearch" className="sr-only">
          Search bookings, users, flights, hotels, vehicles
        </label>
        <input
          id="adminSearch"
          type="search"
          placeholder={searchPlaceholder}
          value={searchText}
          onChange={(e) => setSearchText(e.target.value)}
          autoComplete="off"
          aria-live="polite"
          aria-atomic="true"
          aria-describedby="searchHint"
        />
        <button type="submit" aria-label="Submit search">
          <FaSearch />
        </button>
        <p id="searchHint" className="sr-only">
          Enter keywords or IDs and press enter to search across all services.
        </p>
      </form>
      <nav className="admin-nav" aria-label="Admin tools">
        <a href="/admin/users" className="admin-nav-link" aria-label="User and Role Management">
          <FaUsersCog /> User Admin
        </a>
        <button
          className="notification-bell"
          aria-label={`Show notifications, ${notifications.length} new`}
          aria-haspopup="true"
          aria-expanded={showNotifications}
          onClick={() => setShowNotifications((v) => !v)}
          ref={bellRef}
        >
          <FaBell />
          {notifications.length > 0 && <span className="bell-count">{notifications.length}</span>}
        </button>
        {showNotifications && (
          <div className="notifications-dropdown" role="region" aria-live="polite" aria-label="Notifications">
            <h3>Notifications</h3>
            <ul>
              {notifications.length === 0 ? (
                <li>No new notifications.</li>
              ) : (
                notifications.map((n) => <li key={n.id}>{n.message}</li>)
              )}
            </ul>
          </div>
        )}
      </nav>
    </header>
  );

  // KPI Cards component
  const renderKPIs = () => {
    if (!summaryData) {
      return <p className="loading">Loading summary...</p>;
    }
    return (
      <section className="kpi-cards" aria-label="Platform Summary">
        <article className="kpi-card animate-pop" tabIndex="0" aria-label={`Total bookings ${summaryData.totalBookings.toLocaleString()}`}>
          <h4>Total Bookings</h4>
          <p>{summaryData.totalBookings.toLocaleString()}</p>
        </article>
        <article className="kpi-card animate-pop" tabIndex="0" aria-label={`Total revenue $${summaryData.totalRevenue.toLocaleString()}`}>
          <h4>Total Revenue</h4>
          <p>${summaryData.totalRevenue.toLocaleString()}</p>
        </article>
        <article className="kpi-card animate-pop" tabIndex="0" aria-label={`New users today ${summaryData.newUsersToday.toLocaleString()}`}>
          <h4>New Users (Today)</h4>
          <p>{summaryData.newUsersToday.toLocaleString()}</p>
        </article>
      </section>
    );
  };

  // Live widgets for each service
  const renderLiveWidgets = () => {
    if (!liveWidgetData) {
      return <p className="loading">Loading live data...</p>;
    }
    return (
      <section className="live-widgets" aria-label="Live Service Data Widgets">
        {/* Flights widget */}
        <section className="widget flights-widget" tabIndex="0" aria-label="Flights summary widget">
          <h3>Flights</h3>
          <p>
            <strong>Today's Bookings:</strong> {liveWidgetData.flights.todayBookings}
          </p>
          <p>
            <strong>Popular Routes:</strong> {liveWidgetData.flights.popularRoutes.join(", ")}
          </p>
          <p>
            <strong>Low Occupancy Flights:</strong> {liveWidgetData.flights.lowOccupancyFlights.join(", ")}
          </p>
        </section>

        {/* Hotels widget */}
        <section className="widget hotels-widget" tabIndex="0" aria-label="Hotels summary widget">
          <h3>Hotels</h3>
          <p>
            <strong>Rooms Booked:</strong> {liveWidgetData.hotels.roomsBooked}
          </p>
          <p>
            <strong>Occupancy Rate:</strong> {liveWidgetData.hotels.occupancyRate}%
          </p>
          <p>
            <strong>Top-Selling Hotels:</strong> {liveWidgetData.hotels.topSellingHotels.join(", ")}
          </p>
        </section>

        {/* Cars widget */}
        <section className="widget cars-widget" tabIndex="0" aria-label="Cars summary widget">
          <h3>Cars</h3>
          <p>
            <strong>Cars Rented:</strong> {liveWidgetData.cars.carsRented}
          </p>
          <p>
            <strong>Most Popular Model:</strong> {liveWidgetData.cars.mostPopularModel}
          </p>
          <p>
            <strong>Available Fleet:</strong> {liveWidgetData.cars.availableFleet}
          </p>
        </section>
      </section>
    );
  };

  // Charts section
  const renderCharts = () => (
    <section className="charts-section" aria-label="Platform analytics charts">
      <article className="chart-container" aria-label="Daily revenue for past month broken down by service">
        <h3>Daily Revenue (Past Month)</h3>
        <canvas id="dailyRevenueChart" role="img" aria-label="Line chart showing daily revenue"></canvas>
      </article>
      <article className="chart-container" aria-label="Bookings by service type">
        <h3>Bookings by Service Type</h3>
        <canvas id="bookingsByServiceChart" role="img" aria-label="Pie chart showing bookings distribution by service type"></canvas>
      </article>
      <article className="chart-container" aria-label="Bookings by top 5 destinations">
        <h3>Bookings by Top 5 Destinations</h3>
        <canvas id="bookingsByDestChart" role="img" aria-label="Bar chart showing bookings count for top 5 destinations"></canvas>
      </article>
    </section>
  );

  // Recent Activity feed
  const renderRecentActivity = () => (
    <section className="activity-feed" aria-label="Recent activity feed">
      <h3>Recent Activity</h3>
      <ul>
        {activityFeed.length === 0 && <li>No recent activity</li>}
        {activityFeed.map((item) => (
          <li key={item.id} tabIndex="0" aria-label={`Activity type ${item.type}: ${item.message}`}>
            <span className={`activity-type ${item.type.toLowerCase()}`}>{item.type}:</span> {item.message}
          </li>
        ))}
      </ul>
    </section>
  );

  // Alerts / Pending Actions
  const renderAlerts = () => (
    <section className="alerts-section" aria-label="Pending actions and alerts">
      <h3>Pending Actions & Alerts</h3>
      <ul>
        {alerts.length === 0 && <li>No pending alerts</li>}
        {alerts.map((alert) => (
          <li
            key={alert.id}
            tabIndex="0"
            aria-label={`Alert: ${alert.message}`}
            className="alert-item"
          >
            {alert.message}
          </li>
        ))}
      </ul>
    </section>
  );

  return (
    <div className="travel-admin-homepage">
      {renderSidebar()}
      <div className="main-content" role="main">
        {renderHeader()}
        <section className="dashboard-content">
          {renderKPIs()}
          {renderLiveWidgets()}
          {renderCharts()}
          <div className="feed-alerts-wrapper">
            {renderRecentActivity()}
            {renderAlerts()}
          </div>
        </section>
      </div>
    </div>
  );
}


/* Root Variables */
:root {
  --primary-color: #4f46e5;
  --secondary-color: #059669;
  --accent-color: #d946ef;
  --background: #f9fafb;
  --gray-dark: #1f2937;
  --gray-medium: #6b7280;
  --gray-light: #d1d5db;
  --card-bg: #fff;
  --card-radius: 12px;
  --transition-duration: 0.3s;
  --shadow-light: rgba(99, 102, 241, 0.2);
  --shadow-medium: rgba(0, 0, 0, 0.08);
  --font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  --max-content-width: 1280px;
}

/* Global */
body,
html,
.travel-admin-homepage {
  margin: 0;
  padding: 0;
  font-family: var(--font-family);
  background-color: var(--background);
  color: var(--gray-dark);
  height: 100vh;
  display: flex;
}

a {
  text-decoration: none;
  color: inherit;
}

button {
  border: none;
  cursor: pointer;
  font-family: inherit;
  font-weight: 600;
  background: none;
  color: inherit;
}

/* Sidebar */
.sidebar {
  width: 240px;
  background: var(--card-bg);
  box-shadow: 2px 0 8px var(--shadow-medium);
  display: flex;
  flex-direction: column;
  padding: 2rem 1.5rem;
  box-sizing: border-box;
  user-select: none;
}

.sidebar-header {
  font-size: 1.75rem;
  font-weight: 700;
  margin-bottom: 2rem;
  color: var(--primary-color);
}

.sidebar-link {
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 0.85rem 1rem;
  font-weight: 600;
  font-size: 1.1rem;
  border-left: 4px solid transparent;
  border-radius: 6px;
  transition: all var(--transition-duration) ease;
  margin-bottom: 0.5rem;
  color: var(--gray-dark);
}

.sidebar-link:hover,
.sidebar-link[aria-current="page"] {
  background: var(--shadow-light);
  color: var(--primary-color);
  border-left-color: var(--primary-color);
}

.sidebar-icon {
  font-size: 1.4rem;
}

.sidebar-shortcuts {
  margin-top: auto;
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
  border-top: 1px solid var(--gray-light);
  padding-top: 1.5rem;
}

.shortcut-btn {
  font-size: 0.95rem;
  font-weight: 600;
  background: var(--primary-color);
  color: white;
  padding: 0.7rem 1rem;
  border-radius: 30px;
  text-align: center;
  box-shadow: 0 4px 12px var(--shadow-light);
  transition: background-color var(--transition-duration);
  user-select: none;
}

.shortcut-btn:hover {
  background: #4338ca;
}

/* Main content */

.main-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  overflow-y: auto;
  max-width: 100vw;
}

/* Header */

.main-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem 2rem;
  background: var(--card-bg);
  box-shadow: 0 1px 5px var(--shadow-medium);
  position: sticky;
  top: 0;
  z-index: 10;
}

.search-form {
  flex-grow: 1;
  max-width: 600px;
  display: flex;
  align-items: center;
  border: 2px solid var(--gray-light);
  border-radius: 8px;
  overflow: hidden;
  background: white;
  transition: border-color var(--transition-duration);
}

.search-form:focus-within {
  border-color: var(--primary-color);
  box-shadow: 0 0 5px var(--primary-color);
}

.search-form input[type="search"] {
  border: none;
  padding: 0.8rem 1rem;
  font-size: 1rem;
  width: 100%;
  outline-offset: 2px;
  font-family: inherit;
}

.search-form button {
  background: var(--primary-color);
  color: white;
  padding: 0.65rem 1.1rem;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.1rem;
  cursor: pointer;
  transition: background-color var(--transition-duration);
}

.search-form button:hover {
  background: #4338ca;
}

.admin-nav {
  display: flex;
  align-items: center;
  gap: 1.5rem;
}

.admin-nav-link {
  color: var(--primary-color);
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-weight: 700;
  font-size: 1rem;
  user-select: none;
  transition: color var(--transition-duration);
}

.admin-nav-link:hover {
  color: #4338ca;
}

.notification-bell {
  position: relative;
  font-size: 1.7rem;
  color: var(--primary-color);
  cursor: pointer;
  transition: color var(--transition-duration);
}

.notification-bell:hover {
  color: var(--accent-color);
}

.bell-count {
  position: absolute;
  top: -5px;
  right: -8px;
  background: var(--accent-color);
  width: 18px;
  height: 18px;
  font-size: 0.75rem;
  border-radius: 50%;
  color: white;
  font-weight: 600;
  display: flex;
  align-items: center;
  justify-content: center;
  user-select: none;
  pointer-events: none;
}

.bell-ring {
  animation: bellShake 1.5s cubic-bezier(0.36, 0.07, 0.19, 0.97);
  transform-origin: 50% 4px;
}

@keyframes bellShake {
  0% {
    transform: rotate(0deg);
  }
  15% {
    transform: rotate(15deg);
  }
  30% {
    transform: rotate(-15deg);
  }
  45% {
    transform: rotate(10deg);
  }
  60% {
    transform: rotate(-10deg);
  }
  75% {
    transform: rotate(5deg);
  }
  100% {
    transform: rotate(0deg);
  }
}

.notifications-dropdown {
  position: absolute;
  right: 0;
  top: 46px;
  width: 320px;
  background: var(--card-bg);
  border-radius: var(--card-radius);
  box-shadow: 0 6px 18px var(--shadow-medium);
  padding: 1rem;
  z-index: 50;
  max-height: 320px;
  overflow-y: auto;
  user-select: none;
}

.notifications-dropdown h3 {
  margin-top: 0;
  margin-bottom: 1rem;
  color: var(--primary-color);
  font-size: 1.2rem;
}

.notifications-dropdown ul {
  list-style: none;
  padding-left: 0;
  margin: 0;
}

.notifications-dropdown li {
  margin-bottom: 0.6rem;
  font-size: 0.9rem;
  color: var(--gray-dark);
  line-height: 1.3;
}

.notifications-dropdown li:last-child {
  margin-bottom: 0;
}

/* Dashboard Content */

.dashboard-content {
  padding: 1.5rem 2rem 3rem 2rem;
  max-width: var(--max-content-width);
  margin: 0 auto;
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  gap: 2.5rem;
}

/* KPI Cards */

.kpi-cards {
  display: flex;
  gap: 2rem;
  justify-content: center;
  flex-wrap: wrap;
}

.kpi-card {
  background: var(--card-bg);
  box-shadow: 0 6px 20px var(--shadow-light);
  border-radius: var(--card-radius);
  padding: 2rem 2.5rem;
  flex: 1 1 220px;
  max-width: 320px;
  text-align: center;
  cursor: default;
  user-select: none;
  transition: box-shadow var(--transition-duration), transform var(--transition-duration);
}

.kpi-card:hover,
.kpi-card:focus {
  box-shadow: 0 8px 28px rgba(79, 70, 229, 0.4);
  transform: translateY(-6px);
  outline: none;
}

.kpi-card h4 {
  margin: 0;
  font-weight: 600;
  font-size: 1.1rem;
  color: var(--primary-color);
  margin-bottom: 0.5rem;
}

.kpi-card p {
  margin: 0;
  font-size: 2.3rem;
  font-weight: 700;
  color: var(--primary-color);
  user-select: text;
}

/* Live Widgets */

.live-widgets {
  display: flex;
  gap: 2rem;
  flex-wrap: wrap;
  justify-content: center;
}

.widget {
  background: var(--card-bg);
  border-radius: var(--card-radius);
  box-shadow: 0 4px 14px var(--shadow-light);
  padding: 1.8rem 2.2rem;
  flex: 1 1 270px;
  max-width: 320px;
  cursor: default;
  user-select: none;
  transition: box-shadow var(--transition-duration), transform var(--transition-duration);
}

.widget:hover,
.widget:focus {
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  transform: translateY(-5px);
  outline: none;
}

.widget h3 {
  margin-top: 0;
  margin-bottom: 1rem;
  color: var(--primary-color);
  font-size: 1.15rem;
}

.widget p {
  margin: 0.3rem 0;
  font-weight: 600;
  font-size: 1rem;
  color: var(--gray-dark);
}

/* Chart Section */

.charts-section {
  display: flex;
  gap: 3rem;
  justify-content: center;
  flex-wrap: wrap;
}

.chart-container {
  background: var(--card-bg);
  border-radius: var(--card-radius);
  box-shadow: 0 6px 22px var(--shadow-light);
  padding: 1rem 1.5rem 2rem 1.5rem;
  flex: 1 1 350px;
  max-width: 460px;
}

.chart-container h3 {
  margin: 0 0 1rem 0;
  font-weight: 700;
  color: var(--primary-color);
  font-size: 1.2rem;
}

/* Recent Activity & Alerts */

.feed-alerts-wrapper {
  display: flex;
  gap: 3rem;
  justify-content: center;
  flex-wrap: wrap;
}

.activity-feed,
.alerts-section {
  background: var(--card-bg);
  border-radius: var(--card-radius);
  box-shadow: 0 6px 22px var(--shadow-light);
  padding: 1rem 1.5rem;
  flex: 1 1 320px;
  max-width: 450px;
  max-height: 320px;
  overflow-y: auto;
}

.activity-feed h3,
.alerts-section h3 {
  margin: 0 0 1rem 0;
  font-weight: 700;
  color: var(--primary-color);
  font-size: 1.2rem;
}

.activity-feed ul,
.alerts-section ul {
  list-style: none;
  padding-left: 0;
  margin: 0;
}

.activity-feed li,
.alerts-section li {
  margin-bottom: 0.9rem;
  font-size: 0.95rem;
  color: var(--gray-dark);
  line-height: 1.3;
  outline-offset: 2px;
  outline: none;
}

.activity-feed li:last-child,
.alerts-section li:last-child {
  margin-bottom: 0;
}

.activity-type {
  font-weight: 700;
  margin-right: 6px;
}

.activity-type.booking {
  color: var(--primary-color);
}

.activity-type.refund {
  color: var(--accent-color);
}

.activity-type.return {
  color: var(--secondary-color);
}

/* Accessibility helper - screen reader only */
.sr-only {
  border: 0 !important;
  clip: rect(1px, 1px, 1px, 1px) !important;
  -webkit-clip-path: inset(50%) !important;
  clip-path: inset(50%) !important;
  height: 1px !important;
  margin: -1px !important;
  overflow: hidden !important;
  padding: 0 !important;
  position: absolute !important;
  width: 1px !important;
  white-space: nowrap !important;
}

/* Animations */

@keyframes popIn {
  0% {
    opacity: 0;
    transform: scale(0.96);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
}

.animate-pop {
  animation: popIn 0.33s cubic-bezier(0.73, 1.5, 0.29, 0.98) forwards;
}

/* Responsive */

@media screen and (max-width: 1050px) {
  .kpi-cards,
  .live-widgets,
  .charts-section,
  .feed-alerts-wrapper {
    flex-direction: column;
    align-items: center;
  }

  .chart-container,
  .activity-feed,
  .alerts-section,
  .widget,
  .kpi-card {
    max-width: 90vw;
  }

  .sidebar {
    width: 64px;
  }

  .sidebar-header,
  .sidebar-link span,
  .sidebar-shortcuts {
    display: none;
  }

  .sidebar-link {
    justify-content: center;
    border: none !important;
  }
}


















